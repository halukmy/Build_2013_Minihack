<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Buddy</name>
  </assembly>
  <members>
    <member name="T:Buddy.AppMetadata">
      <summary>
            Represents a collection of application level metadata items. You can access this class through the BuddyClient object.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");


            var success = await client.Metadata.SetAsync("test key", "test value");

            // Search for items within a thousand meters of a location.
             IDictionary&lt;string, MetadataItem&gt; items = await client.Metadata.FindAsync(1000, 47.7, -122.2);
</code></example></summary>
    </member>
    <member name="M:Buddy.AppMetadata.GetAllAsync(System.Action{System.Collections.Generic.Dictionary{System.String,Buddy.MetadataItem},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get all the metadata items for this application. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of all of the application metadata items.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.GetAsync(System.Action{Buddy.MetadataItem,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
      <param name="key">The key to use to reference the metadata item.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is the metadata item or null if it doesn't exist.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.SetAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the item was set, false otherwise..</param>
      <param name="key">The key of the metadata item, can't be null or empty.</param>
      <param name="value">The value of the metadata item, can't be null.</param>
      <param name="latitude">The optional latitude of the metadata item.</param>
      <param name="longitude">The optional longitude of the metadata item.</param>
      <param name="appTag">The optional application tag for this item.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Delete a metadata item referenced by key.
            </summary>
      <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the item was deleted, false otherwise (i.e. doesn't exist).</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.DeleteAllAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete all application metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if all metadata was deleted, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.FindAsync(System.Action{System.Collections.Generic.Dictionary{System.String,Buddy.MetadataItem},Buddy.BuddyCallbackParams},System.Int32,System.Double,System.Double,System.Int32,System.String,System.String,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Search for metadata items in this application. Note that this method will only find app-level metadata items.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a dictionary of metadata keys mapped to items.</param>
      <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
      <param name="latitude">The latitude from where the saerch will start.</param>
      <param name="longitude">The longitude from where the saerch will start.</param>
      <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
      <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
      <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
      <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
      <param name="valueMin">Optionally search for metadata item values that are bigger than this number.</param>
      <param name="valueMax">Optionally search for metadata item values that are smaller than this number.</param>
      <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
      <param name="sortAscending">Optionally sort the results ascending.</param>
      <param name="disableCache">Optionally disable cache searches.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.SumAsync(System.Action{Buddy.MetadataSum,Buddy.BuddyCallbackParams},System.String,System.Int32,System.Double,System.Double,System.Int32,System.String,System.Object)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a sum of all the found metadata item values.</param>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.BatchSumAsync(System.Action{System.Collections.Generic.List{Buddy.MetadataSum},Buddy.BuddyCallbackParams},System.String,System.String,System.Double,System.Double,System.Int32,System.String,System.Object)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of sums corresponding to all the keys that were given to this method.</param>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.GetAllAsync">
      <summary>
            Get all the metadata items for this application. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.GetAsync(System.String)">
      <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
      <param name="key">The key to use to reference the metadata item.</param>
      <returns>A Task&lt;MetadataItem&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.SetAsync(System.String,System.String,System.Double,System.Double,System.String)">
      <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
      <param name="key">The key of the metadata item, can't be null or empty.</param>
      <param name="value">The value of the metadata item, can't be null.</param>
      <param name="latitude">The optional latitude of the metadata item.</param>
      <param name="longitude">The optional longitude of the metadata item.</param>
      <param name="appTag">The optional application tag for this item.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.DeleteAsync(System.String)">
      <summary>
            Delete a metadata item referenced by key.
            </summary>
      <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.DeleteAllAsync">
      <summary>
            Delete all application metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.FindAsync(System.Int32,System.Double,System.Double,System.Int32,System.String,System.String,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Search for metadata items in this application. Note that this method will only find app-level metadata items.
            </summary>
      <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
      <param name="latitude">The latitude from where the saerch will start.</param>
      <param name="longitude">The longitude from where the saerch will start.</param>
      <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
      <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
      <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
      <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
      <param name="valueMin">Optionally search for metadata item values that are bigger than this number.</param>
      <param name="valueMax">Optionally search for metadata item values that are smaller than this number.</param>
      <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
      <param name="sortAscending">Optionally sort the results ascending.</param>
      <param name="disableCache">Optionally disable cache searches.</param>
      <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.SumAsync(System.String,System.Int32,System.Double,System.Double,System.Int32,System.String)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <returns>A Task&lt;MetadataSum&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AppMetadata.BatchSumAsync(System.String,System.String,System.Double,System.Double,System.Int32,System.String)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <returns>A Task&lt;IEnumerable&lt;MetadataSum&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blob.EditInfoAsync(System.String,System.String)">
      <summary>
            Edits the information related to this Blob.
            </summary>
      <param name="friendlyName">The new human friendly name for the Blob. Leave null or empty to not change.</param>
      <param name="appTag">The new AppTag for the Blob. Leave null or empty to not change.</param>
      <returns>A Task&lt;bool&gt; that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blob.GetAsync">
      <summary>
            Gets a Stream of this Blob.
            </summary>
      <returns>A Task&lt;Stream&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blob.DeleteAsync">
      <summary>
            Delete this Blob.
            </summary>
      <returns>A Task&lt;bool&gt; that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.Blob.BlobID">
      <summary>
            Gets the ID of the Blob.
            </summary>
    </member>
    <member name="P:Buddy.Blob.FriendlyName">
      <summary>
            Gets the human friendly name of the Blob.
            </summary>
    </member>
    <member name="P:Buddy.Blob.MimeType">
      <summary>
            Gets the MIMEType of the Blob.
            </summary>
    </member>
    <member name="P:Buddy.Blob.FileSize">
      <summary>
            Gets the size of the Blob in bytes.
            </summary>
    </member>
    <member name="P:Buddy.Blob.AppTag">
      <summary>
            Gets the optional application tag for the Blob.
            </summary>
    </member>
    <member name="P:Buddy.Blob.Owner">
      <summary>
            Gets the UserID of the user that uploaded this Blob.
            </summary>
    </member>
    <member name="P:Buddy.Blob.Latitude">
      <summary>
            Gets the latitude where the Blob was created.
            </summary>
    </member>
    <member name="P:Buddy.Blob.Longitude">
      <summary>
            Gets the longitude where the Blob was created.
            </summary>
    </member>
    <member name="P:Buddy.Blob.UploadDate">
      <summary>
            Gets the date the Blob was uploaded.
            </summary>
    </member>
    <member name="P:Buddy.Blob.LastTouchDate">
      <summary>
            Gets the date the Blob was last touched (uploaded or edited)
            </summary>
    </member>
    <member name="T:Buddy.Blobs">
      <summary>
            Represents a class that can be used to add, retrieve or delete Blobs.
            <example><code></code></example></summary>
    </member>
    <member name="M:Buddy.Blobs.AddAsync(System.String,System.String,System.String,System.Double,System.Double,System.IO.Stream)">
      <summary>
            Uploads a Blob and returns a Blob object representing it.
            </summary>
      <param name="friendlyName">The human friendly name for the blob.</param>
      <param name="mimeType">The MimeType of the blob.</param>
      <param name="appTag">Optional metadata to store with the Blob object. ie: comments on the Blob.</param>
      <param name="latitude">The latitude of the location where the Blob object is being created.</param>
      <param name="longitude">The longitude of the location where the Blob object is being created.</param>
      <param name="blobData">The Stream of the Blob to upload.</param>
      <returns>A Task&lt;Blob&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blobs.GetAsync(System.Int64)">
      <summary>
            Gets the bytes for the given Blob.
            </summary>
      <param name="blobID">The ID of the Blob to be retrieved.</param>
      <returns>A Task&lt;Stream&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blobs.GetInfoAsync(System.Int64)">
      <summary>
            Gets a Blob object that represents the given Blob.
            </summary>
      <param name="blobID">The ID of the blob to be retrieved.</param>
      <returns>A Task&lt;Blob&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blobs.SearchMyBlobsAsync(System.String,System.String,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Searches the Blobs belonging to the current user using the given criteria.
            </summary>
      <param name="friendlyName">The string to search the friendlyName by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="mimeType">The string to search the MIMEType by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="appTag">The string to search the AppTag by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="searchDistance">The radius of the startup search. Pass -1 to ignore.</param>
      <param name="searchLatitude">The latitude where the search should start.</param>
      <param name="searchLongitude">The longitude where the search should start.</param>
      <param name="timeFilter">The number of days in the past to search. Pass -1 to ignore.</param>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Blob&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blobs.SearchBlobsAsync(System.String,System.String,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Searches the Blobs belonging to all users using the given criteria.
            </summary>
      <param name="friendlyName">The string to search the friendlyName by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="mimeType">The string to search the MIMEType by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="appTag">The string to search the AppTag by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="searchDistance">The radius of the startup search. Pass -1 to ignore.</param>
      <param name="searchLatitude">The latitude where the search should start.</param>
      <param name="searchLongitude">The longitude where the search should start.</param>
      <param name="timeFilter">The number of days in the past to search. Pass -1 to ignore</param>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Blob&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blobs.GetBlobListAsync(System.Int64,System.Int32)">
      <summary>
            Gets a list of the blobs belonging to either the given User or to all users of the App.
            </summary>
      <param name="userID">The UserID for which to return Blobs. Pass -1 for all users.</param>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Blob&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Blobs.GetMyBlobListAsync(System.Int32)">
      <summary>
            Gets a list of the blobs belonging to the current User.
            </summary>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Blob&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.BuddyServiceException">
      <summary>
            Occurs when there is an error processing the service request.
            </summary>
    </member>
    <member name="P:Buddy.BuddyServiceException.Error">
      <summary>
            The error that occured.
            </summary>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.GetReceiptsForUserAsync(Buddy.Commerce,System.Nullable{System.DateTime})">
      <summary>
            Finds the receipt list based on the FromDateTime parameter for the currently logged in user.
            </summary>
      <param name="fromDateTime">The starting date and time to get receipts from, leave this blank to get all the receipts.</param>
      <returns>A Task&lt;IEnumerable&lt;Receipt&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.GetReceiptForUserAndTransactionIDAsync(Buddy.Commerce,System.String)">
      <summary>
            Finds the receipt associated with the specified CustomTransactionID for the currently logged in user.
            </summary>
      <param name="customTransactionID">The CustomTransactionID of the transaction. For Facebook payments this is the OrderID of the transaction.</param>
      <returns>A Task&lt;IEnumerable&lt;Receipt&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.SaveReceiptAsync(Buddy.Commerce,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
      <summary>
            Saves a receipt for the purchase of an item made to the application's store.
            </summary>
      <param name="totalCost">The total cost for the items purchased in the transaction.</param>
      <param name="totalQuantity">The total number of items purchased.</param>
      <param name="storeItemID">The store ID of the item of the item being purchased.</param>
      <param name="storeName">The name of the application's store to be saved with the transaction. This field is used by the commerce analytics to track purchases.</param>
      <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
      <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
      <param name="appData">Optional metadata to associate with the transaction.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.VerifyiOSReceiptAsync(Buddy.Commerce,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
      <summary>
            Verifies that a receipt received from the Apple store is actually from Apple.
            </summary>
      <param name="totalCost">The total cost for the items purchased in the transaction.</param>
      <param name="totalQuantity">The total number of items purchased.</param>
      <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
      <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
      <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
      <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
      <param name="appData">Optional metadata to associated with the transaction.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.VerifyAndSaveiOSReceiptAsync(Buddy.Commerce,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
      <summary>
            Verifies that a receipt received from the Apple store is actually from Apple and stores a copy of the receipt on Buddy's servers.
            </summary>
      <param name="totalCost">The total cost for the items purchased in the transaction.</param>
      <param name="totalQuantity">The total number of items purchased.</param>
      <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
      <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
      <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
      <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
      <param name="appData">Optional metadata to associated with the transaction.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.GetAllStoreItemsAsync(Buddy.Commerce)">
      <summary>
            Returns information about all items in the store for the current application.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;StoreItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.GetActiveStoreItemsAsync(Buddy.Commerce)">
      <summary>
            Returns information about all store items for an application which are currently active (available for sale).
            </summary>
      <returns>A Task&lt;IEnumerable&lt;StoreItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.CommerceTaskWrappers.GetFreeStoreItemsAsync(Buddy.Commerce)">
      <summary>
            Returns information about all items in the store for the current application which are marked as free.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;StoreItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendRequestsTaskWrappers.AddAsync(Buddy.FriendRequests,Buddy.User,System.String)">
      <summary>
            Add a friend request to a user.
            </summary>
      <param name="user">The user to send the request to, can't be null.</param>
      <param name="appTag">Mark this request with an tag, can be used on the user's side to make a decision on whether to accept the request.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendRequestsTaskWrappers.GetAllAsync(Buddy.FriendRequests,System.DateTime)">
      <summary>
            A list of all users that have request to be friends with this user.
            </summary>
      <param name="afterDate">Filter the list by returning only the friend requests after a ceratin date.</param>
      <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendRequestsTaskWrappers.AcceptAsync(Buddy.FriendRequests,Buddy.User,System.String)">
      <summary>
            Accept a friend request from a user.
            </summary>
      <param name="user">The user to accept as friend. Can't be null and must be on the friend requests list.</param>
      <param name="appTag">Tag this friend accept with a string.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendRequestsTaskWrappers.DenyAsync(Buddy.FriendRequests,Buddy.User)">
      <summary>
            Deny the friend request from a user.
            </summary>
      <param name="user">The user to deny the friend request from. User can't be null and must be on the friend request list.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendsTaskWrappers.GetAllAsync(Buddy.Friends,System.DateTime)">
      <summary>
            Returns the list of friends for the user.
            </summary>
      <param name="afterDate">Filter the list by friends added 'afterDate'.</param>
      <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendsTaskWrappers.RemoveAsync(Buddy.Friends,Buddy.User)">
      <summary>
            Remove a user from the current list of friends.
            </summary>
      <param name="user">The user to remove from the friends list. Must be already on the list and can't be null.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameScoresTaskWrappers.AddAsync(Buddy.GameScores,System.Double,System.String,System.String,System.Double,System.Double,System.Boolean,System.String)">
      <summary>
            Add a new score for this user.
            </summary>
      <param name="score">The numeric value of the score.</param>
      <param name="board">The optional name of the game board.</param>
      <param name="rank">The optional rank for this score. This can be used for adding badges, achievements, etc.</param>
      <param name="latitude">The optional latitude for this score.</param>
      <param name="longitude">The optional longitude for this score.</param>
      <param name="oneScorePerPlayer">The optional one-score-per-player paramter. Setting this to true will always update the score for this user, instead of creating a new one.</param>
      <param name="appTag">An optional application tag for this score.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameScoresTaskWrappers.DeleteAllAsync(Buddy.GameScores)">
      <summary>
            Delete all scores for this user.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameScoresTaskWrappers.GetAllAsync(Buddy.GameScores,System.Int32)">
      <summary>
            Return all score entries for this user.
            </summary>
      <param name="recordLimit">Limit the number of entries returned.</param>
      <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStatesTaskWrappers.AddAsync(Buddy.GameStates,System.String,System.String,System.String)">
      <summary>
            Adds a key/value pair to the User GameState.
            </summary>
      <param name="gameStateKey">The game state key.</param>
      <param name="gameStateValue">The value to persist.</param>
      <param name="appTag">An optional application tag for this score.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStatesTaskWrappers.GetAsync(Buddy.GameStates,System.String)">
      <summary>
            Get a GameState item with a key. The key can't be null or an empty string.
            </summary>
      <param name="gameStateKey">The gameStateKey to use to reference the GameState item.</param>
      <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
      <returns>A Task&lt;GameState&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStatesTaskWrappers.UpdateAsync(Buddy.GameStates,System.String,System.String,System.String)">
      <summary>
            Update a GameState value.
            </summary>
      <param name="gameStateKey">The key to update.</param>
      <param name="gameStateValue">The value to update.</param>
      <param name="newAppTag">An optional new application tag for the value.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStatesTaskWrappers.RemoveAsync(Buddy.GameStates,System.String)">
      <summary>
            Remove a GameState key.
            </summary>
      <param name="gameStateKey">The key to remove from the GameState.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStatesTaskWrappers.GetAllAsync(Buddy.GameStates)">
      <summary>
            Get all GameState keys and values.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,GameState&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.IdentityTaskWrappers.GetAllAsync(Buddy.Identity)">
      <summary>
            Returns all the identity values for this user.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;IdentityItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.IdentityTaskWrappers.AddAsync(Buddy.Identity,System.String)">
      <summary>
            Add an identity value for this user.
            </summary>
      <param name="value">The value to add.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.IdentityTaskWrappers.RemoveAsync(Buddy.Identity,System.String)">
      <summary>
            Remove an identity value for this user.
            </summary>
      <param name="value">The value to remove.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.IdentityTaskWrappers.CheckForValuesAsync(Buddy.Identity,System.String)">
      <summary>
            Check for the existance of an identity value in the system. The search is perform for the entire app.
            </summary>
      <param name="values">The value to search for. This can either be a single value or a semi-colon separated list of values.</param>
      <returns>A Task&lt;IEnumerable&lt;IdentityItemSearchResult&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupTaskWrappers.JoinAsync(Buddy.MessageGroup)">
      <summary>
            This method has the current user join this message group.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupTaskWrappers.LeaveAsync(Buddy.MessageGroup)">
      <summary>
            This methods has the current user leave this message group.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupTaskWrappers.AddUserAsync(Buddy.MessageGroup,Buddy.User)">
      <summary>
            Add a user to this message group. 
            </summary>
      <param name="userToAdd">The User to add to the message group.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupTaskWrappers.RemoveUserAsync(Buddy.MessageGroup,Buddy.User)">
      <summary>
            Remove a user from this message group.
            </summary>
      <param name="userToRemove">The user to remove from the group.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupTaskWrappers.SendMessageAsync(Buddy.MessageGroup,System.String,System.Double,System.Double,System.String)">
      <summary>
            Send a message to the entire message group.
            </summary>
      <param name="message">The message to send to this group. Must be less then 1000 characters.</param>
      <param name="latitude">The optional latitude from where this message was sent.</param>
      <param name="longitude">The optional longitude from where this message was sent.</param>
      <param name="appTag">An optional application tag for this message.</param>
      <returns>A Task&lt;IDictionary&lt;Int32,Boolean&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupTaskWrappers.GetReceivedAsync(Buddy.MessageGroup,System.DateTime)">
      <summary>
            Get all messages this group has received.
            </summary>
      <param name="afterDate">Optionally return only messages sent after this date.</param>
      <returns>A Task&lt;IEnumerable&lt;GroupMessage&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupTaskWrappers.DeleteAsync(Buddy.MessageGroup)">
      <summary>
            Delete this message group.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupsTaskWrappers.CreateAsync(Buddy.MessageGroups,System.String,System.Boolean,System.String)">
      <summary>
            Create a new message group.
            </summary>
      <param name="name">The name of the new group, must be unique for the app.</param>
      <param name="openGroup">Optionally whether to make to group open for all user (anyone can join), or closed (only the owner can add users to it).</param>
      <param name="appTag">An optional application tag for this message group.</param>
      <returns>A Task&lt;MessageGroup&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupsTaskWrappers.CheckIfExistsAsync(Buddy.MessageGroups,System.String)">
      <summary>
            Check if a group with this name already exists.
            </summary>
      <param name="name">The name of the group to check for.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupsTaskWrappers.GetAllAsync(Buddy.MessageGroups)">
      <summary>
            Get all message groups for this app.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;MessageGroup&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroupsTaskWrappers.GetMyAsync(Buddy.MessageGroups)">
      <summary>
            Get all message groups that this user is part of.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;MessageGroup&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessagesTaskWrappers.SendAsync(Buddy.Messages,Buddy.User,System.String,System.String)">
      <summary>
            Send a message to a user from the current authenticated user.
            </summary>
      <param name="toUser">The user to send a message to.</param>
      <param name="message">The message to send, must be less then 200 characters.</param>
      <param name="appTag">An optional application tag to set for the message.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessagesTaskWrappers.GetReceivedAsync(Buddy.Messages,System.DateTime)">
      <summary>
            Get all received message by the current user.
            </summary>
      <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
      <returns>A Task&lt;IEnumerable&lt;Message&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessagesTaskWrappers.GetSentAsync(Buddy.Messages,System.DateTime)">
      <summary>
            Get all sent message by the current user.
            </summary>
      <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
      <returns>A Task&lt;IEnumerable&lt;Message&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MetadataItemTaskWrappers.SetAsync(Buddy.MetadataItem,System.String,System.Double,System.Double,System.String)">
      <summary>
            Updates the value of this metadata item.
            </summary>
      <param name="value">The new value for this item, can't be null.</param>
      <param name="latitude">The optional latitude for this item.</param>
      <param name="longitude">The optional longitude for this item.</param>
      <param name="appTag">The optional application tag for this item.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MetadataItemTaskWrappers.DeleteAsync(Buddy.MetadataItem)">
      <summary>
            Deletes this metadata item.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroidTaskWrappers.RegisterDeviceAsync(Buddy.NotificationsAndroid,System.String,System.String)">
      <summary>
            Register an Android device for notificatons with Buddy. 
            </summary>
      <param name="registrationID">The registration ID for the application currently running on the device. Note: this is the registration ID returned after registering with C2DM.</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroidTaskWrappers.UnregisterDeviceAsync(Buddy.NotificationsAndroid)">
      <summary>
            Unregister the current user from push notifications for Android.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroidTaskWrappers.GetRegisteredDevicesAsync(Buddy.NotificationsAndroid,System.String,System.Int32,System.Int32)">
      <summary>
            Get a paged list of registered Android devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <returns>A Task&lt;IEnumerable&lt;RegisteredDeviceAndroid&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroidTaskWrappers.GetGroupsAsync(Buddy.NotificationsAndroid)">
      <summary>
            Get a list of Android groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroidTaskWrappers.SendRawMessageAsync(Buddy.NotificationsAndroid,System.String,System.Int32,System.DateTime,System.String)">
      <summary>
            Send a raw message to a Android device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
      <param name="rawMessage">The message to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAppleTaskWrappers.RegisterDeviceAsync(Buddy.NotificationsApple,System.String,System.String)">
      <summary>
            Register an Apple device for notificatons with Buddy. 
            </summary>
      <param name="appleDeviceToken">A token provided by the Apple Push Notification Service (APNs) which identifies the device to register (analogous to a phone number).</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAppleTaskWrappers.UnregisterDeviceAsync(Buddy.NotificationsApple)">
      <summary>
            Unregister the current user from push notifications for Apple devices.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAppleTaskWrappers.GetRegisteredDevicesAsync(Buddy.NotificationsApple,System.String,System.Int32,System.Int32)">
      <summary>
            Get a paged list of registered Apple devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <returns>A Task&lt;IEnumerable&lt;RegisteredDeviceApple&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAppleTaskWrappers.GetGroupsAsync(Buddy.NotificationsApple)">
      <summary>
            Get a list of Apple groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAppleTaskWrappers.SendRawMessageAsync(Buddy.NotificationsApple,System.Int32,System.String,System.String,System.String,System.String,System.DateTime,System.String)">
      <summary>
            Send a raw message to a Apple device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
      <param name="message">The message to send to the user.</param>
      <param name="badge">The badge number to set on the icon. It is the application's responsibility to determine what number to set.</param>
      <param name="sound">The notification sound to play.</param>
      <param name="customItems">Metadata to send with the message for the receiving application to use. Data should be specified as key/value pairs where each key and value are seperated by a comma and each pair is seperated by a ";" character including the last pair ie: key,value;key,value;. Leave empty or set to null if there is no metadata to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8TaskWrappers.RegisterDeviceAsync(Buddy.NotificationsWin8,System.String,System.String,System.String,System.String)">
      <summary>
            Register an Win8 device for notificatons with Buddy. 
            </summary>
      <param name="deviceUri">The URI for the device as returned by the Windows push phone HttpNotificationChannel object.</param>
      <param name="clientId">The Package Security Identifier (SID) acquired when the app was registered with the Windows Store Dashboard. </param>
      <param name="clientSecret">The secret key corresponding to the SID acquired when the app was registered with the Windows Store Dashboard.</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8TaskWrappers.UnregisterDeviceAsync(Buddy.NotificationsWin8)">
      <summary>
            Unregister the current user from push notifications for Win8 devices.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8TaskWrappers.GetRegisteredDevicesAsync(Buddy.NotificationsWin8,System.String,System.Int32,System.Int32)">
      <summary>
            Get a paged list of registered Win8 devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <returns>A Task&lt;IEnumerable&lt;RegisteredDeviceWin8&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8TaskWrappers.GetGroupsAsync(Buddy.NotificationsWin8)">
      <summary>
            Get a list of Win8 groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8TaskWrappers.SendTileAsync(Buddy.NotificationsWin8,System.String,System.Int32,System.DateTime,System.String)">
      <summary>
            Send a image tile to a Win8 device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
      <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http:///msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8TaskWrappers.SendBadgeAsync(Buddy.NotificationsWin8,System.String,System.Int32,System.DateTime,System.String)">
      <summary>
            Send a badge to a windows 8 device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
      <param name="xmlPayload">The message to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8TaskWrappers.SendToastMessageAsync(Buddy.NotificationsWin8,System.String,System.Int32,System.DateTime,System.String)">
      <summary>
            Send toast message to a windows 8 device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
      <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http:///msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PlaceTaskWrappers.SetTagAsync(Buddy.Place,System.String,System.String)">
      <summary>
            Set an application specific tag or a user tag for a place.
            </summary>
      <param name="appTag">The application level tag to set.</param>
      <param name="userTag">The user-level tag to set for this Place.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PlacesTaskWrappers.FindAsync(Buddy.Places,System.Int32,System.Double,System.Double,System.Int32,System.String,System.Int32)">
      <summary>
            Find a location close to a given latitude and logitude.
            </summary>
      <param name="searchDistanceInMeters">The radius of the location search.</param>
      <param name="latitude">The latitude where the search should start.</param>
      <param name="longitude">The longitude where the search should start.</param>
      <param name="numberOfResults">Optional number of result to return, defaults to 10.</param>
      <param name="searchForName">Optional search string, for example: "Star*" to search for all place that start with the string "Star"</param>
      <param name="searchCategoryId">Optional search category ID to narrow down the search with.</param>
      <returns>A Task&lt;IEnumerable&lt;Place&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PlacesTaskWrappers.GetCategoriesAsync(Buddy.Places)">
      <summary>
            Get all geo-location categories in Buddy.
            </summary>
      <returns>A Task&lt;IDictionary&lt;Int32,String&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PlacesTaskWrappers.GetAsync(Buddy.Places,System.Int32,System.Double,System.Double)">
      <summary>
            Get a Place by it's globally unique identifier. This method can also be used to calculate a distance from a lat/long to a place.
            </summary>
      <param name="placeId">The ID of the place to retreive.</param>
      <param name="latitude">The optional latitude to calcualte a distance to.</param>
      <param name="longitude">The optioanl longitude to calculate a distance to.</param>
      <returns>A Task&lt;Place&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.StartupsTaskWrappers.FindAsync(Buddy.Startups,System.Int32,System.Double,System.Double,System.Int32,System.String)">
      <summary>
            Searches for statups by name within the distance of the specified location. Note: To search for all startups within the distance from the specified location, leave the SearchName parameter empty.
            </summary>
      <param name="searchDistanceInMeters">The radius of the startup search.</param>
      <param name="latitude">The latitude where the search should start.</param>
      <param name="longitude">The longitude where the search should start.</param>
      <param name="numberOfResults">The number of search results to return.</param>
      <param name="searchForName">Optional search string, for example: "Star*" to search for all startups that begin with the string "Star".</param>
      <returns>A Task&lt;IEnumerable&lt;Startup&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.StartupsTaskWrappers.GetMetroAreaListAsync(Buddy.Startups)">
      <summary>
            Gets a list of the supported metro areas for statups including the URL to an image for each area returned.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;MetroArea&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.StartupsTaskWrappers.GetFromMetroAreaAsync(Buddy.Startups,System.String,System.Int32)">
      <summary>
            Get a list of startups in the specified metro area.
            </summary>
      <param name="metroName">The name of the metro area within which to search for startups.</param>
      <param name="recordLimit">The number of search results to return.</param>
      <returns>A Task&lt;IEnumerable&lt;Startup&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumTaskWrappers.DeleteAsync(Buddy.VirtualAlbum)">
      <summary>
            Delete this virtual album.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumTaskWrappers.AddPictureAsync(Buddy.VirtualAlbum,Buddy.PicturePublic)">
      <summary>
            Add an existing (uploaded) photo to a virtual album. This photo can be either private or public (either PicturePublic and Picture will work).
            </summary>
      <param name="picture">The picture to add to the virtual albums. Either PicturePublic or Picture works.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumTaskWrappers.AddPictureBatchAsync(Buddy.VirtualAlbum,System.Collections.Generic.List{Buddy.PicturePublic})">
      <summary>
            Add a list of pictures to this virtual album.
            </summary>
      <param name="pictures">The list of pictures to add to this photo album. Either PicturePublic or Picture works.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumTaskWrappers.RemovePictureAsync(Buddy.VirtualAlbum,Buddy.PicturePublic)">
      <summary>
            Remove a picture from this virtual album.
            </summary>
      <param name="picture">The picture to remove from the album. Either PicturePublic or Picture works.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumTaskWrappers.UpdateAsync(Buddy.VirtualAlbum,System.String,System.String)">
      <summary>
            Update this virtul albums name and app.tag
            </summary>
      <param name="newName">The new name for the album.</param>
      <param name="newAppTag">An optional new application tag for the album.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumTaskWrappers.UpdatePictureAsync(Buddy.VirtualAlbum,Buddy.PicturePublic,System.String,System.String)">
      <summary>
            Update virtual album picture comment or app.tag.
            </summary>
      <param name="picture">The picture to be updated, either PicturePublic or Picture works.</param>
      <param name="newComment">The new comment to set for the picture.</param>
      <param name="newAppTag">An optional new application tag for the picture.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumsTaskWrappers.CreateAsync(Buddy.VirtualAlbums,System.String,System.String)">
      <summary>
            Create a new virtual album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="name">The name of the new virtual album.</param>
      <param name="appTag">An optional application tag for the album.</param>
      <returns>A Task&lt;VirtualAlbum&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumsTaskWrappers.GetAsync(Buddy.VirtualAlbums,System.Int32)">
      <summary>
            Get a virtual album by its globally unique identifier. All the album photos will be retreived as well. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="albumId">The ID of the virtual album to retrieve.</param>
      <returns>A Task&lt;VirtualAlbum&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbumsTaskWrappers.GetMyAsync(Buddy.VirtualAlbums)">
      <summary>
            Get the IDs of all the virtual albums that this user owns.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Commerce">
      <summary>
            Represents an object that can be used to handle commerce for the user.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // get all the available store items.
            //
            IEnumerable&lt;StoreItem&gt; items = await user.Commerce.GetActiveStoreItemsAsync();
</code></example></summary>
    </member>
    <member name="M:Buddy.Commerce.GetReceiptsForUserAsync(System.Action{System.Collections.Generic.List{Buddy.Receipt},Buddy.BuddyCallbackParams},System.Nullable{System.DateTime},System.Object)">
      <summary>
            Finds the receipt list based on the FromDateTime parameter for the currently logged in user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is .NET List of Receipts if this method was successful.</param>
      <param name="fromDateTime">The starting date and time to get receipts from, leave this blank to get all the receipts.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Commerce.GetReceiptForUserAndTransactionIDAsync(System.Action{System.Collections.Generic.List{Buddy.Receipt},Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Finds the receipt associated with the specified CustomTransactionID for the currently logged in user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is .NET List of Receipts if this method was successful.</param>
      <param name="customTransactionID">The CustomTransactionID of the transaction. For Facebook payments this is the OrderID of the transaction.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Commerce.SaveReceiptAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Object)">
      <summary>
            Saves a receipt for the purchase of an item made to the application's store.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
      <param name="totalCost">The total cost for the items purchased in the transaction.</param>
      <param name="totalQuantity">The total number of items purchased.</param>
      <param name="storeItemID">The store ID of the item of the item being purchased.</param>
      <param name="storeName">The name of the application's store to be saved with the transaction. This field is used by the commerce analytics to track purchases.</param>
      <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
      <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
      <param name="appData">Optional metadata to associate with the transaction.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Commerce.VerifyiOSReceiptAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.Object)">
      <summary>
            Verifies that a receipt received from the Apple store is actually from Apple.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
      <param name="totalCost">The total cost for the items purchased in the transaction.</param>
      <param name="totalQuantity">The total number of items purchased.</param>
      <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
      <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
      <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
      <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
      <param name="appData">Optional metadata to associated with the transaction.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Commerce.VerifyAndSaveiOSReceiptAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.Object)">
      <summary>
            Verifies that a receipt received from the Apple store is actually from Apple and stores a copy of the receipt on Buddy's servers.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
      <param name="totalCost">The total cost for the items purchased in the transaction.</param>
      <param name="totalQuantity">The total number of items purchased.</param>
      <param name="useSandbox">Set to true when testing this function in a "sandbox" to execute this call against the Apple sandbox server, or false to have the call executed against the production Apple server.</param>
      <param name="appleItemID">The optional ID associated with the item as assigned by Apple.</param>
      <param name="receiptData">Optional information to store with the receipt such as notes about the transaction.</param>
      <param name="customTransactionID">An optional app-specific ID to associate with the purchase.</param>
      <param name="appData">Optional metadata to associated with the transaction.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Commerce.GetAllStoreItemsAsync(System.Action{System.Collections.Generic.List{Buddy.StoreItem},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Returns information about all items in the store for the current application.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of StoreItems if this method was successful.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Commerce.GetActiveStoreItemsAsync(System.Action{System.Collections.Generic.List{Buddy.StoreItem},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Returns information about all store items for an application which are currently active (available for sale).
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of StoreItems if this method was successful.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Commerce.GetFreeStoreItemsAsync(System.Action{System.Collections.Generic.List{Buddy.StoreItem},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
             Returns information about all items in the store for the current application which are marked as free.
             </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of StoreItems if this method was successful.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.GamePlayer">
      <summary>
            Represents a game player object.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.Name">
      <summary>
            Gets the name of the player.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.CreatedOn">
      <summary>
            Gets the date the player was created.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.BoardName">
      <summary>
            Gets the name of the board the player belongs to.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.ApplicationTag">
      <summary>
            Gets the optional application tag for the player.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.Latitude">
      <summary>
            Gets the latitude where the player was created.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.Longitude">
      <summary>
            Gets the longitude where the player was created.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.UserID">
      <summary>
            Gets the UserID of the user this player is tied to.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.DistanceInKilometers">
      <summary>
            Gets the distance in kilo-meters from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.DistanceInMeters">
      <summary>
            Gets the distance in meters from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.DistanceInMiles">
      <summary>
            Gets the distance in miles from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.DistanceInYards">
      <summary>
            Gets the distance in yards from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="P:Buddy.GamePlayer.Rank">
      <summary></summary>
    </member>
    <member name="T:Buddy.GamePlayers">
      <summary>
            Represents a player in a game. The Player object tracks game specific items such as board, ranks, and other data specific to building game leader boards and other game related constructs. 
            </summary>
    </member>
    <member name="M:Buddy.GamePlayers.AddAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Creates a new game Player object for an existing user in Buddy.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="name">The name of the new player.</param>
      <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
      <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
      <param name="latitude">The latitude of the location where the Player object is being created.</param>
      <param name="longitude">The longitude of the location where the Player object is being created.</param>
      <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.UpdateAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Updates one or more fields of an existing Player object which was previously created.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="name">The name of the new player.</param>
      <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
      <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
      <param name="latitude">The latitude of the location where the Player object is being updated.</param>
      <param name="longitude">The longitude of the location where the Player object is being updated. </param>
      <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete the player object for this user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.GetInfoAsync(System.Action{Buddy.GamePlayer,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get all the player info for this user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the player info for this user.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.FindAsync(System.Action{System.Collections.Generic.List{Buddy.GamePlayer},Buddy.BuddyCallbackParams},System.Int32,System.Double,System.Double,System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.Object)">
      <summary>
            Searches for Player objects stored in the Buddy system. Searches can optionally be performed based on location.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of player that were found.</param>
      <param name="searchDistanceInMeters">The radius (in meters) around the specified location in which to look for locations. Pass in -1 to ignore this field.  </param>
      <param name="latitude">The latitude of the location around which to search for locations within the specified SearchDistance.   </param>
      <param name="longitude">The longitude of the location around which to search for locations within the specified SearchDistance. </param>
      <param name="recordLimit">The maximum number of search results to return or -1 to return all search results.    </param>
      <param name="boardName">Searches for scores which contain the specified board. Leave empty or pass in null if no board filter is to be used.    </param>
      <param name="onlyForLastNumberOfDays">The number of days into the past for which to look for scores. ie: passing in 5 will filter scores to include those which were added/updated on or after 5 days ago. Pass in -1 to ignore this filter.    </param>
      <param name="minimumScore">The minimum score value to search for. Pass in -1 to ignore this filter. </param>
      <param name="appTag">Searches for scores with the specified ApplicationTag stored with them. Leave empty or pass in null to ignore this filter. </param>
      <param name="rank">Optionally search for a player rank.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.AddAsync(System.String,System.String,System.String,System.Double,System.Double,System.String)">
      <summary>
            Creates a new game Player object for an existing user in Buddy.
            </summary>
      <param name="name">The name of the new player.</param>
      <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
      <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
      <param name="latitude">The latitude of the location where the Player object is being created.</param>
      <param name="longitude">The longitude of the location where the Player object is being created.</param>
      <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.UpdateAsync(System.String,System.String,System.String,System.Double,System.Double,System.String)">
      <summary>
            Updates one or more fields of an existing Player object which was previously created.
            </summary>
      <param name="name">The name of the new player.</param>
      <param name="board">An optional name of a "Board" for the game. Used for grouping scores together either by user group, levels, or some other method relevant to the game. Although optional, a value is recommended such as "Default" for use in later searches of scores. If no board is to be stored, then pass in null or leave empty.</param>
      <param name="rank">An optional ranking to associate with the score. Can be any string ie: descriptions of achievements, ranking strings like "excellent", etc. Pass in null or an empty string if you do not wish to store a rank</param>
      <param name="latitude">The latitude of the location where the Player object is being updated.</param>
      <param name="longitude">The longitude of the location where the Player object is being updated. </param>
      <param name="appTag">Optional metadata to store with the Player object. ie: a list of players, game state, etc. Leave empty or set to null if there is no data to store with the score.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.DeleteAsync">
      <summary>
            Delete the player object for this user.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.GetInfoAsync">
      <summary>
            Get all the player info for this user.
            </summary>
      <returns>A Task&lt;GamePlayer&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GamePlayers.FindAsync(System.Int32,System.Double,System.Double,System.Int32,System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>
            Searches for Player objects stored in the Buddy system. Searches can optionally be performed based on location.
            </summary>
      <param name="searchDistanceInMeters">The radius (in meters) around the specified location in which to look for locations. Pass in -1 to ignore this field.  </param>
      <param name="latitude">The latitude of the location around which to search for locations within the specified SearchDistance.   </param>
      <param name="longitude">The longitude of the location around which to search for locations within the specified SearchDistance. </param>
      <param name="recordLimit">The maximum number of search results to return or -1 to return all search results.    </param>
      <param name="boardName">Searches for scores which contain the specified board. Leave empty or pass in null if no board filter is to be used.    </param>
      <param name="onlyForLastNumberOfDays">The number of days into the past for which to look for scores. ie: passing in 5 will filter scores to include those which were added/updated on or after 5 days ago. Pass in -1 to ignore this filter.    </param>
      <param name="minimumScore">The minimum score value to search for. Pass in -1 to ignore this filter. </param>
      <param name="appTag">Searches for scores with the specified ApplicationTag stored with them. Leave empty or pass in null to ignore this filter. </param>
      <param name="rank">Optionally search for a player rank.</param>
      <returns>A Task&lt;IEnumerable&lt;GamePlayer&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.MetroArea">
      <summary>
            Represents a single, named metropolitan area in the Buddy system.
            </summary>
    </member>
    <member name="P:Buddy.MetroArea.MetroName">
      <summary>
            Gets the name of the the supported metro area.
            </summary>
    </member>
    <member name="P:Buddy.MetroArea.ImageURL">
      <summary>
            Gets the image URL an image for the area.
            </summary>
    </member>
    <member name="T:Buddy.AuthenticatedUser">
      <summary>
             Represents a user that has been authenticated with the Buddy Platform. Use this object to interact with the service on behalf of the user.
             <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            

            // create a new user
            AuthenticatedUser user = await client.CreateUserAsync("username", "password");


            // login an existing user
            AuthenticatedUser user2 = await client.LoginAsync("username", "password") ;
</code></example></summary>
    </member>
    <member name="T:Buddy.User">
      <summary>
            Represents a public user profile. Public user profiles are usually returned when looking at an AuthenticatedUser's friends or making a search with FindUser.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // find users within 10k of a location
            var users = user.FindUsersAsync(47.7, -122.2, 10000);
</code></example></summary>
    </member>
    <member name="M:Buddy.User.GetProfilePhotosAsync(System.Action{System.Collections.Generic.List{Buddy.PicturePublic},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Gets a list of profile photos for this user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of profile photos.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.User.GetProfilePhotosAsync">
      <summary>
            Gets a list of profile photos for this user.
            </summary>
      <returns>A Task&lt;IEnumerable&lt;PicturePublic&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.User.Name">
      <summary>
            Gets the name of the user.
            </summary>
    </member>
    <member name="P:Buddy.User.ID">
      <summary>
            Gets the system-wide unique ID of the user.
            </summary>
    </member>
    <member name="P:Buddy.User.Gender">
      <summary>
            Gets the gender of the user.
            </summary>
    </member>
    <member name="P:Buddy.User.ApplicationTag">
      <summary>
            Gets the optional application tag for the user.
            </summary>
    </member>
    <member name="P:Buddy.User.Latitude">
      <summary>
            Gets the latitude of the last check-in for this user.
            </summary>
    </member>
    <member name="P:Buddy.User.Longitude">
      <summary>
            Gets the longitude of the last check-in for this user.
            </summary>
    </member>
    <member name="P:Buddy.User.LastLoginOn">
      <summary>
            Gets the last time this user logged on to the platform.
            </summary>
    </member>
    <member name="P:Buddy.User.ProfilePicture">
      <summary>
            Gets the profile picture for this user.
            </summary>
    </member>
    <member name="P:Buddy.User.ProfilePictureID">
      <summary>
            Gets the profile picture ID for this user.
            </summary>
    </member>
    <member name="P:Buddy.User.Age">
      <summary>
            Gets the age of this user.
            </summary>
    </member>
    <member name="P:Buddy.User.Status">
      <summary>
            Gets the status of the user.
            </summary>
    </member>
    <member name="P:Buddy.User.CreatedOn">
      <summary>
            Gets the date this user was created.
            </summary>
    </member>
    <member name="P:Buddy.User.DistanceInKilometers">
      <summary>
            If this user profile was returned from a search, gets the distance in kilometers from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.User.DistanceInMeters">
      <summary>
            If this user profile was returned from a search, gets the distance in meters from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.User.DistanceInMiles">
      <summary>
            If this user profile was returned from a search, gets the distance in miles from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.User.DistanceInYards">
      <summary>
            If this user profile was returned from a search, gets the distance in yards from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.User.FriendRequestPending">
      <summary>
            Does this user have a friends request pending.
            </summary>
    </member>
    <member name="P:Buddy.User.GameScores">
      <summary>
            Add and remove gamescore for this user.
            </summary>
    </member>
    <member name="P:Buddy.User.GameStates">
      <summary>
            Add and remove GameStates for this user.
            </summary>
    </member>
    <member name="M:Buddy.AuthenticatedUser.FindUserAsync(System.Action{Buddy.User,Buddy.BuddyCallbackParams},System.Int32,System.Object)">
      <summary>
            Find the public profile of a user from their unique User ID. This method can be used to find any user associated with this Application.
            </summary>
      <param name="id">The ID of the user, must be bigger than 0.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is the user account associated with the ID.</param>
      <exception cref="T:Buddy.BuddyServiceException">With value: InvalidUserId, when the user ID doesn't exist in the system.</exception>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.FindUserAsync(System.Action{System.Collections.Generic.List{Buddy.User},Buddy.BuddyCallbackParams},System.Double,System.Double,System.UInt32,System.UInt32,Buddy.UserGender,System.UInt32,System.UInt32,Buddy.UserStatus,System.UInt32,System.String,System.Object)">
      <summary>
            Find the public profiles of all users that match the serch parameters.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of users that was found by this search, or an empty list if there are no results.</param>
      <param name="latitude">The latitude of the position to search from. Must be a value between -90.0 and 90.0.</param>
      <param name="longitude">The Longitude of the position to search from. Must be a value between -180.0 and 180.0.</param>
      <param name="searchDistance">The distance in meters from the specified latitude/longitude to search for results. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
      <param name="recordLimit">The maximum number of users to return with this search.</param>
      <param name="gender">The gender of the users, use UserGender.Any to search for both.</param>
      <param name="ageStart">Specifies the starting age for the range of ages to search in. The value must be &gt;= 0.</param>
      <param name="ageStop">Specifies the ending age for the range of ages to search in. The value must be &gt; ageStart.</param>
      <param name="status">The status of the users to search for. Use UserStatus.Any to ignore this parameter.</param>
      <param name="checkinsWithinMinutes">Filter for users who have checked-in in the past 'checkinsWithinMinutes' number of minutes.</param>
      <param name="appTag">Search for the custom appTag that was stored with the user.</param>
      <exception cref="T:System.ArgumentException">When latitude or longitude are incorrect.</exception>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.AddProfilePhotoAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Byte[],System.String,System.Object)">
      <summary>
            Add a profile photo for this user.
            </summary>
      <param name="blob">An array of bytes that represent the image you are adding.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the profile photo was added, false otherwise.</param>
      <param name="appTag">An optional tag for the photo.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.CheckInAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Double,System.Double,System.String,System.String,System.Object)">
      <summary>
            Check-in the user at a location.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the check-in was successful, false otherwise.</param>
      <param name="latitude">The latitude of the location.</param>
      <param name="longitude">The longitude of the location.</param>
      <param name="comment">An optional comment for the check-in.</param>
      <param name="appTag">An optional application specific tag for the location.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.GetCheckInsAsync(System.Action{System.Collections.Generic.List{Buddy.CheckInLocation},Buddy.BuddyCallbackParams},System.DateTime,System.Object)">
      <summary>
            Get a list of user check-in locations.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of user checkins.</param>
      <param name="afterDate">Filter the list to return only check-in after a date.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete this user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the user was deleted, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.UpdateAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,Buddy.UserGender,System.Int32,System.String,Buddy.UserStatus,System.Boolean,System.Boolean,System.String,System.Object)">
      <summary>
            Update the profile of this user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the update was successful, false otherwise.</param>
      <param name="name">Optional new name for the user, can't be null or empty.</param>
      <param name="password">Optional new password for the user, can't be null.</param>
      <param name="gender">Optional new gender for the user.</param>
      <param name="age">Optional new age for the user.</param>
      <param name="email">Optional new email for the user.</param>
      <param name="status">Optional new status for the user.</param>
      <param name="fuzzLocation">Optional change in location fuzzing for this user. If location fuzzing is enable, user location will be 
            randomized in all searches by other users.</param>
      <param name="celebrityMode">Optional change in celebrity mode for this user. If celebrity mode is enabled the user will be hidden from all searches in the system.</param>
      <param name="appTag">Optional update to the custom application tag for this user.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.GetPictureAsync(System.Action{Buddy.Picture,Buddy.BuddyCallbackParams},System.Int32,System.Object)">
      <summary>
            Retrieve a picture by its unique ID. Any picture that the user owns or is publicly available can be retrieved.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the picture if found, null otherwise.</param>
      <param name="pictureId">The id of the picture to retrieve.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.SearchForAlbumsAsync(System.Action{System.Collections.Generic.List{Buddy.PhotoAlbumPublic},Buddy.BuddyCallbackParams},System.Int32,System.Double,System.Double,System.Int32,System.Object)">
      <summary>
            Search for public albums from other users.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of public albums.</param>
      <param name="searchDistanceInMeters">Optionally search only within a certain distance from the supplied lat/long.</param>
      <param name="latitude">Optionally search for photos added near a latitude.</param>
      <param name="longitude">Optionally search for photos added near a longitude.</param>
      <param name="limitResults">Optionally limit the number of returned photos. Note that this parameter limits the photos returned, not albums. It's possible
            that a partial album is returned.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.DeleteProfilePhotoAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.PicturePublic,System.Object)">
      <summary>
            Delete a profile photo for this user. You can use the GetProfilePhotosAsync method to retrieve all the profile photos.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="picture">The photo to delete.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.SetProfilePhotoAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.PicturePublic,System.Object)">
      <summary>
            Set a new "active" profile photo from the list of profile photos that the user has uploaded. The photo needs to be already uploaded.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="picture">The photo to set as the "active" profile photo.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.FindUsersAsync(System.Double,System.Double,System.UInt32,System.UInt32,Buddy.UserGender,System.UInt32,System.UInt32,Buddy.UserStatus,System.UInt32,System.String)">
      <param name="latitude">The latitude of the position to search from. Must be a value between -90.0 and 90.0.</param>
      <param name="longitude">The Longitude of the position to search from. Must be a value between -180.0 and 180.0.</param>
      <param name="searchDistance">The distance in meters from the specified latitude/longitude to search for results. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
      <param name="recordLimit">The maximum number of users to return with this search.</param>
      <param name="gender">The gender of the users, use UserGender.Any to search for both.</param>
      <param name="ageStart">Specifies the starting age for the range of ages to search in. The value must be &gt;= 0.</param>
      <param name="ageStop">Specifies the ending age for the range of ages to search in. The value must be &gt; ageStart.</param>
      <param name="status">The status of the users to search for. Use UserStatus.Any to ignore this parameter.</param>
      <param name="checkinsWithinMinutes">Filter for users who have checked-in in the past 'checkinsWithinMinutes' number of minutes.</param>
      <param name="appTag">Search for the custom appTag that was stored with the user.</param>
      <exception cref="T:System.ArgumentException">When latitude or longitude are incorrect.</exception>
      <returns>A Task&lt;IEnumerable&lt;User&gt;&gt; that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.DeleteAsync">
      <summary>
            Delete this user.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.UpdateAsync(System.String,System.String,Buddy.UserGender,System.Int32,System.String,Buddy.UserStatus,System.Boolean,System.Boolean,System.String)">
      <summary>
            Update the profile of this user.
            </summary>
      <param name="name">Optional new name for the user, can't be null or empty.</param>
      <param name="password">Optional new password for the user, can't be null.</param>
      <param name="gender">Optional new gender for the user.</param>
      <param name="age">Optional new age for the user.</param>
      <param name="email">Optional new email for the user.</param>
      <param name="status">Optional new status for the user.</param>
      <param name="fuzzLocation">Optional change in location fuzzing for this user. If location fuzzing is enable, user location will be 
            randomized in all searches by other users.</param>
      <param name="celebrityMode">Optional change in celebrity mode for this user. If celebrity mode is enabled the user will be hidden from all searches in the system.</param>
      <param name="appTag">Optional update to the custom application tag for this user.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.GetPictureAsync(System.Int32)">
      <summary>
            Retrieve a picture by its unique ID. Any picture that the user owns or is publicly available can be retrieved.
            </summary>
      <param name="pictureId">The id of the picture to retrieve.</param>
      <returns>A Task&lt;Picture&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.SearchForAlbumsAsync(System.Int32,System.Double,System.Double,System.Int32)">
      <summary>
            Search for public albums from other users.
            </summary>
      <param name="searchDistanceInMeters">Optionally search only within a certain distance from the supplied lat/long.</param>
      <param name="latitude">Optionally search for photos added near a latitude.</param>
      <param name="longitude">Optionally search for photos added near a longitude.</param>
      <param name="limitResults">Optionally limit the number of returned photos. Note that this parameter limits the photos returned, not albums. It's possible
            that a partial album is returned.</param>
      <returns>A Task&lt;IEnumerable&lt;PhotoAlbumPublic&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.DeleteProfilePhotoAsync(Buddy.PicturePublic)">
      <summary>
            Delete a profile photo for this user. You can use the GetProfilePhotosAsync method to retrieve all the profile photos.
            </summary>
      <param name="picture">The photo to delete.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.SetProfilePhotoAsync(Buddy.PicturePublic)">
      <summary>
            Set a new "active" profile photo from the list of profile photos that the user has uploaded. The photo needs to be already uploaded.
            </summary>
      <param name="picture">The photo to set as the "active" profile photo.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.FindUserAsync(System.Int32)">
      <summary>
            Find the public profile of a user from their unique User ID. This method can be used to find any user associated with this Application.
            </summary>
      <param name="id">The ID of the user, must be bigger than 0.</param>
      <exception cref="T:Buddy.BuddyServiceException">With value: InvalidUserId, when the user ID doesn't exist in the system.</exception>
      <returns>A Task&lt;User&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.FindUserAsync(System.Double,System.Double,System.UInt32,System.UInt32,Buddy.UserGender,System.UInt32,System.UInt32,Buddy.UserStatus,System.UInt32,System.String)">
      <summary>
            Find the public profiles of all users that match the serch parameters.
            </summary>
      <param name="latitude">The latitude of the position to search from. Must be a value between -90.0 and 90.0.</param>
      <param name="longitude">The Longitude of the position to search from. Must be a value between -180.0 and 180.0.</param>
      <param name="searchDistance">The distance in meters from the specified latitude/longitude to search for results. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
      <param name="recordLimit">The maximum number of users to return with this search.</param>
      <param name="gender">The gender of the users, use UserGender.Any to search for both.</param>
      <param name="ageStart">Specifies the starting age for the range of ages to search in. The value must be &gt;= 0.</param>
      <param name="ageStop">Specifies the ending age for the range of ages to search in. The value must be &gt; ageStart.</param>
      <param name="status">The status of the users to search for. Use UserStatus.Any to ignore this parameter.</param>
      <param name="checkinsWithinMinutes">Filter for users who have checked-in in the past 'checkinsWithinMinutes' number of minutes.</param>
      <param name="appTag">Search for the custom appTag that was stored with the user.</param>
      <exception cref="T:System.ArgumentException">When latitude or longitude are incorrect.</exception>
      <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.AddProfilePhotoAsync(System.IO.Stream,System.String)">
      <summary>
            Add a profile photo for this user.
            </summary>
      <param name="photoSteam">An array of bytes that represent the image you are adding.</param>
      <param name="appTag">An optional tag for the photo.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.CheckInAsync(System.Double,System.Double,System.String,System.String)">
      <summary>
            Check-in the user at a location.
            </summary>
      <param name="latitude">The latitude of the location.</param>
      <param name="longitude">The longitude of the location.</param>
      <param name="comment">An optional comment for the check-in.</param>
      <param name="appTag">An optional application specific tag for the location.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.AuthenticatedUser.GetCheckInsAsync(System.DateTime)">
      <summary>
            Get a list of user check-in locations.
            </summary>
      <param name="afterDate">Filter the list to return only check-in after a date.</param>
      <returns>A Task&lt;IEnumerable&lt;CheckInLocation&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Token">
      <summary>
            Gets the unique user token that is the secret used to log-in this user. Each user has a unique ID, a secret user token and a user/pass combination.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Email">
      <summary>
            Gets the email of the user. Can be an empty string or null.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.LocationFuzzing">
      <summary>
            Gets whether location fuzzing is enabled. When enabled any reported locations for this user will be randomized for a few miles. This is a security feature
            that makes it difficult for users to track each other.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.CelebrityMode">
      <summary>
            Gets whether celebrity mode is enabled for this user. When enabled the user will be hidden from all searches in the system.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Metadata">
      <summary>
            Gets the collection of user metadata. Note that the actual metadata is loaded on demand when you call the All or Get method.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.IdentityValues">
      <summary>
            Gets the collection of identity values for the user.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.PhotoAlbums">
      <summary>
            Gets the collection of photo albums for this user. Note that the actual album information is loaded on demand when you call the All or Get method.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.VirtualAlbums">
      <summary>
            Gets the collection of virtual albums for this users. All virtual albums are owned by a single user, however any user may add existing photos to the album. Only the owner of the virtual album can delete the album.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.PushNotifications">
      <summary>
            Gets an object that can be used to register a device for push notifications, send notifications or query the state of devices and groups.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Places">
      <summary>
            Gets an object that can be user for search for locations around the user (places, not other users).
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Friends">
      <summary>
            Gets the collection of friends for this user. Note that the actual friends information is loaded on demand when you call the All or Get method.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Messages">
      <summary>
            Gets an object that can be used to send or receive messages, create message groups, etc.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Startups">
      <summary>
            Gets an object that can be used for search for startups around the user (startups, not other users).
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Commerce">
      <summary>
            Gets an object that can be used for commerce for the user.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.GamePlayers">
      <summary>
            Gets an object that can be used to manipulate game players for the user.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Blobs">
      <summary>
            Gets an object that can be used for Blob for the user.
            </summary>
    </member>
    <member name="P:Buddy.AuthenticatedUser.Videos">
      <summary>
            Gets an object that can be used for Video for the user.
            </summary>
    </member>
    <member name="T:Buddy.BuddyCallbackParams">
      <summary>
            Represents an object that wraps a number of different callback return values.
            </summary>
    </member>
    <member name="P:Buddy.BuddyCallbackParams.Exception">
      <summary>
            Gets the exception in case there was an error while processing the callback.
            </summary>
    </member>
    <member name="P:Buddy.BuddyCallbackParams.Completed">
      <summary>
            Gets whether the call was successful or not.
            </summary>
    </member>
    <member name="P:Buddy.BuddyCallbackParams.State">
      <summary>
            Gets the user defined state object passed to the Async call.
            </summary>
    </member>
    <member name="P:Buddy.BuddyCallbackParams.AsyncResult">
      <summary>
            Gets the IAsyncResult structure for this async call.
            </summary>
    </member>
    <member name="T:Buddy.BuddyClient">
      <summary>
            Represents the main class and entry point to the Buddy platform. Use this class to interact with the platform, create and login users and modify general
            application level properties like Devices and Metadata.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            
            // ping the server
            client.PingAsync().ContinueWith(r =&gt; {
                MessageBox.Show(r.Result);  
            });
</code></example></summary>
    </member>
    <member name="M:Buddy.BuddyClient.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the BuddyClient class. To get an application username and password, go to http://buddy.com, create a new
            developer account and create a new application.
            </summary>
      <param name="appName">The name of the application to use with this client. Can't be null or empty.</param>
      <param name="appPassword">The password of the application to use with this client. Can't be null or empty.</param>
      <param name="appVersion">Optional string that describes the version of the app you are building. This string will then be used when uploading
            device information to buddy or submitting crash reports.</param>
      <param name="autoRecordDeviceInfo">If true automatically records the current device profile with the Buddy Service (device type, os version, etc.). Note that this
            only works for Windows Phone clients.</param>
    </member>
    <member name="M:Buddy.BuddyClient.PingAsync(System.Action{System.String,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Ping the service.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a string "Pong" if this method was successful.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetServiceTimeAsync(System.Action{System.DateTime,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get the current Buddy web-service date/time.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the datetime of the Buddy web-service.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetServiceVersionAsync(System.Action{System.String,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get the current version of the service that is being used by this SDK.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the version of the service.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetUserEmailsAsync(System.Action{System.Collections.Generic.List{System.String},Buddy.BuddyCallbackParams},System.Int32,System.Int32,System.Object)">
      <summary>
            Gets a list of emails for all registered users for this app.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the list of emails.</param>
      <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
      <param name="pageSize">Used for paginig, specify page size.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetUserProfilesAsync(System.Action{System.Collections.Generic.List{Buddy.User},Buddy.BuddyCallbackParams},System.Int32,System.Int32,System.Object)">
      <summary>
            Gets a list of all user profiles for this app.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the list of user profiles.</param>
      <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
      <param name="pageSize">Used for paginig, specify page size.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetApplicationStatisticsAsync(System.Action{System.Collections.Generic.List{Buddy.ApplicationStatistics},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            This method will return a list of statistics for the application covering items such as total users, photos, etc. 
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the list of application stats.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.LoginAsync(System.Action{Buddy.AuthenticatedUser,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Login an existing user with their secret token. Each user is assigned a token on creation, you can store it instead of a
            username/password combination.
            </summary>
      <param name="token">The private token of the user to login.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is a the authenticated user if the login was successful.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.LoginAsync(System.Action{Buddy.AuthenticatedUser,Buddy.BuddyCallbackParams},System.String,System.String,System.Object)">
      <summary>
            Login an existing user with their username and password. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="username">The username of the user. Can't be null or empty.</param>
      <param name="password">The password of the user. Can't be null.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is an authenticated user if the Login was successful.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.CheckIfEmailExistsAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Check if another user with the same email already exists in the system.
            </summary>
      <param name="email">The email to check for, can't be null or empty.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the email exists in the system, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.CheckIfUsernameExistsAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Check if another user with the same name already exists in the system.
            </summary>
      <param name="username">The name to check for, can't be null or empty.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the name exists in the system, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.CreateUserAsync(System.Action{Buddy.AuthenticatedUser,Buddy.BuddyCallbackParams},System.String,System.String,Buddy.UserGender,System.Int32,System.String,Buddy.UserStatus,System.Boolean,System.Boolean,System.String,System.Object)">
      <summary>
            Create a new Buddy user. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is an AuthenticatedUser object is returned.</param>
      <param name="name">The name of the new user. Can't be null or empty.</param>
      <param name="password">The password of the new user. Can't be null.</param>
      <param name="gender">An optional gender for the user.</param>
      <param name="age">An optional age for the user.</param>
      <param name="email">An optional email for the user.</param>
      <param name="status">An optional status for the user.</param>
      <param name="fuzzLocation">Optionally set location fuzzing for this user. When enabled user location is randomized in searches.</param>
      <param name="celebrityMode">Optionally set the celebrity mode for this user. When enabled this user will be absent from all searches.</param>
      <param name="appTag">An optional custom tag for this user.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.StartSessionAsync(System.Action{System.Int32,Buddy.BuddyCallbackParams},Buddy.AuthenticatedUser,System.String,System.String,System.Object)">
      <summary>
            Starts an analytics session
            </summary>
      <param name="callback">The callback to call upon success or error.  The first parameter is an identifier for the session.</param>
      <param name="user">The user that is starting this session</param>
      <param name="sessionName">The name of the session</param>
      <param name="appTag">An optional custom tag to include with the session.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns></returns>
    </member>
    <member name="M:Buddy.BuddyClient.EndSessionAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.AuthenticatedUser,System.Int32,System.String,System.Object)">
      <summary>
            Ends an analytics session
            </summary>
      <param name="callback">The callback to call upon success or error.  The first parameter a boolean which is true upon success.</param>
      <param name="user">The user that is starting this session</param>
      <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
      <param name="appTag">An optional custom tag to include with the session.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns></returns>
    </member>
    <member name="M:Buddy.BuddyClient.RecordSessionMetricAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.AuthenticatedUser,System.Int32,System.String,System.String,System.String,System.Object)">
      <summary>
            Records a session metric value
            </summary>
      <param name="callback">The callback to call upon success or error.  The first parameter a boolean which is true upon success.</param>
      <param name="user">The user that is starting this session</param>
      <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
      <param name="metricKey">A custom key describing the metric.</param>
      <param name="metricValue">The value to set.</param>
      <param name="appTag">An optional custom tag to include with the metric.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns></returns>
    </member>
    <member name="M:Buddy.BuddyClient.CheckIfUsernameExistsAsync(System.String)">
      <summary>
            Check if another user with the same name already exists in the system.
            </summary>
      <param name="username">The name to check for, can't be null or empty.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.CreateUserAsync(System.String,System.String,Buddy.UserGender,System.Int32,System.String,Buddy.UserStatus,System.Boolean,System.Boolean,System.String)">
      <summary>
            Create a new Buddy user. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="name">The name of the new user. Can't be null or empty.</param>
      <param name="password">The password of the new user. Can't be null.</param>
      <param name="gender">An optional gender for the user.</param>
      <param name="age">An optional age for the user.</param>
      <param name="email">An optional email for the user.</param>
      <param name="status">An optional status for the user.</param>
      <param name="fuzzLocation">Optionally set location fuzzing for this user. When enabled user location is randomized in searches.</param>
      <param name="celebrityMode">Optionally set the celebrity mode for this user. When enabled this user will be absent from all searches.</param>
      <param name="appTag">An optional custom tag for this user.</param>
      <returns>A Task&lt;AuthenticatedUser&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.StartSessionAsync(Buddy.AuthenticatedUser,System.String,System.String)">
      <summary>
            Starts an analytics session
            </summary>
      <param name="user">The user that is starting this session</param>
      <param name="sessionName">The name of the session</param>
      <param name="appTag">An optional custom tag to include with the session.</param>
      <returns></returns>
    </member>
    <member name="M:Buddy.BuddyClient.EndSessionAsync(Buddy.AuthenticatedUser,System.Int32,System.String)">
      <summary>
            Ends an analytics session
            </summary>
      <param name="user">The user that is starting this session</param>
      <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
      <param name="appTag">An optional custom tag to include with the session.</param>
      <returns></returns>
    </member>
    <member name="M:Buddy.BuddyClient.RecordSessionMetricAsync(Buddy.AuthenticatedUser,System.Int32,System.String,System.String,System.String)">
      <summary>
            Records a session metric value
            </summary>
      <param name="user">The user that is starting this session</param>
      <param name="sessionId">The id of the session, returned from StartSessionAsync.</param>
      <param name="metricKey">A custom key describing the metric.</param>
      <param name="metricValue">The value to set.</param>
      <param name="appTag">An optional custom tag to include with the metric.</param>
      <returns></returns>
    </member>
    <member name="M:Buddy.BuddyClient.PingAsync">
      <summary>
            Ping the service.
            </summary>
      <returns>A Task&lt;String&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetServiceTimeAsync">
      <summary>
            Get the current Buddy web-service date/time.
            </summary>
      <returns>A Task&lt;DateTime&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetServiceVersionAsync">
      <summary>
            Get the current version of the service that is being used by this SDK.
            </summary>
      <returns>A Task&lt;String&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetUserEmailsAsync(System.Int32,System.Int32)">
      <summary>
            Gets a list of emails for all registered users for this app.
            </summary>
      <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
      <param name="pageSize">Used for paginig, specify page size.</param>
      <returns>A Task&lt;IEnumerable&lt;String&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetUserProfilesAsync(System.Int32,System.Int32)">
      <summary>
            Gets a list of all user profiles for this app.
            </summary>
      <param name="fromRow">Used for paging, retrieve only records starting fromRow.</param>
      <param name="pageSize">Used for paginig, specify page size.</param>
      <returns>A Task&lt;IEnumerable&lt;User&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.GetApplicationStatisticsAsync">
      <summary>
            This method will return a list of statistics for the application covering items such as total users, photos, etc. 
            </summary>
      <returns>A Task&lt;IEnumerable&lt;ApplicationStatistics&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.LoginAsync(System.String)">
      <summary>
            Login an existing user with their secret token. Each user is assigned a token on creation, you can store it instead of a
            username/password combination.
            </summary>
      <param name="token">The private token of the user to login.</param>
      <returns>A Task&lt;AuthenticatedUser&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.LoginAsync(System.String,System.String)">
      <summary>
            Login an existing user with their username and password. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="username">The username of the user. Can't be null or empty.</param>
      <param name="password">The password of the user. Can't be null.</param>
      <returns>A Task&lt;AuthenticatedUser&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.BuddyClient.CheckIfEmailExistsAsync(System.String)">
      <summary>
            Check if another user with the same email already exists in the system.
            </summary>
      <param name="email">The email to check for, can't be null or empty.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.BuddyClient.Service">
      <summary>
            Gets the BuddyServiceClient interface
            </summary>
    </member>
    <member name="P:Buddy.BuddyClient.AppName">
      <summary>
            Gets the application name for this client.
            </summary>
    </member>
    <member name="P:Buddy.BuddyClient.AppPassword">
      <summary>
            Gets the application password for this client.
            </summary>
    </member>
    <member name="P:Buddy.BuddyClient.AppVersion">
      <summary>
            Gets the optional string that describes the version of the app you are building. This string is used when uploading
            device information to buddy or submitting crash reports. It will default to 1.0.
            </summary>
    </member>
    <member name="P:Buddy.BuddyClient.Metadata">
      <summary>
            Gets an object that can be used to manipulate application-level metadata. Metadata is used to store custom values on the platform.
            </summary>
    </member>
    <member name="P:Buddy.BuddyClient.Device">
      <summary>
            Gets an object that can be used to record device information about this client or upload crashes.
            </summary>
    </member>
    <member name="P:Buddy.BuddyClient.GameBoards">
      <summary>
            Gets an object that can be used to retrieve high score rankings or search for game boards in this application.
            </summary>
    </member>
    <member name="P:Buddy.BuddyClient.Sounds">
      <summary>
            Gets an object that can be used to retrieve sounds.
            </summary>
    </member>
    <member name="T:Buddy.ApplicationStatistics">
      <summary>
        <example>
          <code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            IEnumerable&lt;ApplicationStatistics&gt; stats = await client.GetApplicationStatisticsAsync();
</code>
        </example>
      </summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalUsers">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalPhotos">
      <summary>
            This is the combined total of all profile photos and photo album photos for the application
            </summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalUserCheckins">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalUserMetadata">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalAppMetadata">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalFriends">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalAlbums">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalCrashes">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalMessages">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalPushMessages">
      <summary>
            This is the combined total of all push notifications sent for all platforms supported 
            </summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalGamePlayers">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalGameScores">
      <summary></summary>
    </member>
    <member name="P:Buddy.ApplicationStatistics.TotalDeviceInformation">
      <summary></summary>
    </member>
    <member name="T:Buddy.CheckInLocation">
      <summary>
            Represents a single user check-in location.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // check in
            var success = await user.CheckInAsync(47.7, -122.2);

            // retrieve all checkins.
            IEnumerable&lt;CheckInLocation&gt; checkins = await user.GetCheckInsAsync();
</code></example></summary>
    </member>
    <member name="P:Buddy.CheckInLocation.Latitude">
      <summary>
            Gets the latitude of the check-in location.
            </summary>
    </member>
    <member name="P:Buddy.CheckInLocation.Longitude">
      <summary>
            Gets the longitude of the check-in location.
            </summary>
    </member>
    <member name="P:Buddy.CheckInLocation.CheckInDate">
      <summary>
            Gets the datetime of the check-in.
            </summary>
    </member>
    <member name="P:Buddy.CheckInLocation.PlaceName">
      <summary>
            Gets the name of the place where the check-in happend.
            </summary>
    </member>
    <member name="P:Buddy.CheckInLocation.Comment">
      <summary>
            Gets the comment associated with this check-in.
            </summary>
    </member>
    <member name="P:Buddy.CheckInLocation.AppTag">
      <summary>
            Gets the application tag associated with this check-in.
            </summary>
    </member>
    <member name="T:Buddy.GameBoards">
      <summary>
            Represents an object the can be used to retrieve Buddy Game Boards and Scores.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // add a score, then get all scores.
            // 
            var success = await user.GameScores.AddAsync(100, "Advanced Players Board");

            IEnumerable&lt;GameScore&gt; scores = await client.GameBoards.GetHighScoresAsync("Advanced Players Board");
</code></example></summary>
    </member>
    <member name="M:Buddy.GameBoards.GetHighScoresAsync(System.Action{System.Collections.Generic.List{Buddy.GameScore},Buddy.BuddyCallbackParams},System.String,System.Int32,System.Object)">
      <summary>
            Gets a list of high scores for a specific game board.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is a list of game scores.</param>
      <param name="boardName">The board name can be a specific string or a 'LIKE' pattern using %.</param>
      <param name="recordLimit">The maximum number of scores to return.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameBoards.FindScoresAsync(System.Action{System.Collections.Generic.List{Buddy.GameScore},Buddy.BuddyCallbackParams},Buddy.User,System.Int32,System.Double,System.Double,System.Int32,System.String,System.Int32,System.Double,System.String,System.Object)">
      <summary>
            Search for game scores based on a number of different parameters.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is a list of game scores.</param>
      <param name="user">Optionally limit the search to a spcific user.</param>
      <param name="distanceInMeters">Optionally specify a distance from a lat/long to search on. By default this is ignored.</param>
      <param name="latitude">Optional latitude where we can start the search.</param>
      <param name="longitude">Optional longitude where we can start the search.</param>
      <param name="recordLimit">Optionally limit the number of records returned by this search.</param>
      <param name="boardName">Optionally filter on a specific board name.</param>
      <param name="daysOld">Optionally only return scores that are X number of days old.</param>
      <param name="minimumScore">Optionally only return scores that are above a certain minimum score.</param>
      <param name="appTag">Optionally return only scores that have a certain app tag.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameBoards.GetHighScoresAsync(System.String,System.Int32)">
      <summary>
            Gets a list of high scores for a specific game board.
            </summary>
      <param name="boardName">The board name can be a specific string or a 'LIKE' pattern using %.</param>
      <param name="recordLimit">The maximum number of scores to return.</param>
      <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameBoards.GetLowScoresAsync(System.String,System.Int32)">
      <summary>
            Gets a list of lowest scores for a specific game board.
            </summary>
      <param name="boardName">The board name can be a specific string or a 'LIKE' pattern using %.</param>
      <param name="recordLimit">The maximum number of scores to return.</param>
      <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameBoards.FindScoresAsync(Buddy.User,System.Int32,System.Double,System.Double,System.Int32,System.String,System.Int32,System.Double,System.String)">
      <summary>
            Search for game scores based on a number of different parameters.
            </summary>
      <param name="user">Optionally limit the search to a spcific user.</param>
      <param name="distanceInMeters">Optionally specify a distance from a lat/long to search on. By default this is ignored.</param>
      <param name="latitude">Optional latitude where we can start the search.</param>
      <param name="longitude">Optional longitude where we can start the search.</param>
      <param name="recordLimit">Optionally limit the number of records returned by this search.</param>
      <param name="boardName">Optionally filter on a specific board name.</param>
      <param name="daysOld">Optionally only return scores that are X number of days old.</param>
      <param name="minimumScore">Optionally only return scores that are above a certain minimum score.</param>
      <param name="appTag">Optionally return only scores that have a certain app tag.</param>
      <returns>A Task&lt;IEnumerable&lt;GameScore&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.GameScore">
      <summary>
            Represents an object that describes a single game score entry.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.BoardName">
      <summary>
            Gets the name of the board this score is related to.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.AddedOn">
      <summary>
            Gets the date this score was added.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.Latitude">
      <summary>
            Gets the optional latitude for this score.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.Longitude">
      <summary>
            Gets the optional longitude for this score.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.Rank">
      <summary>
            Gets the optioanl rank value for this score.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.Score">
      <summary>
            Gets the numeric value of the score entry.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.UserID">
      <summary>
            Gets the user ID that owns this score.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.UserName">
      <summary>
            Gets the user name of the user who owns this score.
            </summary>
    </member>
    <member name="P:Buddy.GameScore.AppTag">
      <summary>
            Gets the optional application tag for this score.
            </summary>
    </member>
    <member name="T:Buddy.GameScores">
      <summary>
            Represents a class that can be used to add, retrieve or delete game scores for any user in the system.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // add a score, then get all scores.
            // 
            var success = await user.GameScores.AddAsync(100, "Advanced Players Board");

            IEnumerable&lt;GameScore&gt; scores = await client.GameBoards.GetHighScoresAsync("Advanced Players Board");
</code></example></summary>
    </member>
    <member name="M:Buddy.GameScores.AddAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Double,System.String,System.String,System.Double,System.Double,System.Boolean,System.String,System.Object)">
      <summary>
            Add a new score for this user.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is true on success, false otherwise.</param>
      <param name="score">The numeric value of the score.</param>
      <param name="board">The optional name of the game board.</param>
      <param name="rank">The optional rank for this score. This can be used for adding badges, achievements, etc.</param>
      <param name="latitude">The optional latitude for this score.</param>
      <param name="longitude">The optional longitude for this score.</param>
      <param name="oneScorePerPlayer">The optional one-score-per-player paramter. Setting this to true will always update the score for this user, instead of creating a new one.</param>
      <param name="appTag">An optional application tag for this score.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameScores.DeleteAllAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete all scores for this user.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameScores.GetAllAsync(System.Action{System.Collections.Generic.List{Buddy.GameScore},Buddy.BuddyCallbackParams},System.Int32,System.Object)">
      <summary>
            Return all score entries for this user.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is a list of game score entries.</param>
      <param name="recordLimit">Limit the number of entries returned.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.GameState">
      <summary>
            Represents a single game state object.
            </summary>
    </member>
    <member name="P:Buddy.GameState.AppTag">
      <summary>
            Gets the optional application tag for this GameState.
            </summary>
    </member>
    <member name="P:Buddy.GameState.AddedOn">
      <summary>
            Gets the date this GameState was created.
            </summary>
    </member>
    <member name="P:Buddy.GameState.ID">
      <summary></summary>
    </member>
    <member name="P:Buddy.GameState.Key">
      <summary>
            Get the Key for this GameState object.
            </summary>
    </member>
    <member name="P:Buddy.GameState.Value">
      <summary>
            Gets the the value for this GameState object
            </summary>
    </member>
    <member name="T:Buddy.GameStates">
      <summary>
            Represents a class that can be used to add, retrieve or delete game state data for any user in the system.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // set a value
            var success = await user.GameStates.AddAsync("MyKey", "MyValue");

            // retrieve the value
            GameState value = await user.GameStates.GetAsync("MyKey");
</code></example></summary>
    </member>
    <member name="M:Buddy.GameStates.AddAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.String,System.Object)">
      <summary>
            Adds a key/value pair to the User GameState.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is true on success, false otherwise.</param>
      <param name="gameStateKey">The game state key.</param>
      <param name="gameStateValue">The value to persist.</param>
      <param name="appTag">An optional application tag for this score.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStates.GetAsync(System.Action{Buddy.GameState,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Get a GameState item with a key. The key can't be null or an empty string.
            </summary>
      <param name="gameStateKey">The gameStateKey to use to reference the GameState item.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is the state value or null if it doesn't exist.</param>
      <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStates.UpdateAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.String,System.Object)">
      <summary>
            Update a GameState value.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="gameStateKey">The key to update.</param>
      <param name="gameStateValue">The value to update.</param>
      <param name="newAppTag">An optional new application tag for the value.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStates.RemoveAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Remove a GameState key.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="gameStateKey">The key to remove from the GameState.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.GameStates.GetAllAsync(System.Action{System.Collections.Generic.Dictionary{System.String,Buddy.GameState},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get all GameState keys and values.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a Dictionary of name/value pairs for this User's GameState.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.GroupMessage">
      <summary>
            Represents a message that was sent to a group of users through AuthenticatedUser.Messages.Groups.SendMessageAsync.
            </summary>
    </member>
    <member name="P:Buddy.GroupMessage.DateSent">
      <summary>
            Gets the DateTime the message was sent.
            </summary>
    </member>
    <member name="P:Buddy.GroupMessage.FromUserID">
      <summary>
            Gets the user ID of the user that sent the message to the group.
            </summary>
    </member>
    <member name="P:Buddy.GroupMessage.Group">
      <summary>
            Gets the Message group that the message was sent to.
            </summary>
    </member>
    <member name="P:Buddy.GroupMessage.Text">
      <summary>
            Gets the text value of the message.
            </summary>
    </member>
    <member name="P:Buddy.GroupMessage.Latitude">
      <summary>
            Gets the optional latitude from where the message was sent.
            </summary>
    </member>
    <member name="P:Buddy.GroupMessage.Longitude">
      <summary>
            Gets the optional longitude from where the message was sent.
            </summary>
    </member>
    <member name="T:Buddy.Message">
      <summary>
            Represents a single message that one user sent to another.
            </summary>
    </member>
    <member name="P:Buddy.Message.DateSent">
      <summary>
            Gets the DateTime the message was sent.
            </summary>
    </member>
    <member name="P:Buddy.Message.FromUserID">
      <summary>
            Gets the ID of the user who sent the message.
            </summary>
    </member>
    <member name="P:Buddy.Message.ToUserID">
      <summary>
            Gets the ID of the user who received the message.
            </summary>
    </member>
    <member name="P:Buddy.Message.Text">
      <summary>
            Gets the text value of the message.
            </summary>
    </member>
    <member name="T:Buddy.MessageGroup">
      <summary>
            Represents a single message group. Message groups are groups of users that can message each other. Groups can either be public, with anyone being able
            to join them, or private - where only the user that create the group can add other users to it.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            AuthenticatedUser user = await client.LoginAsync("username", "password");
            MessageGroup newGroup = await user.Messages.Groups.CreateAsync("My Group", true);

            // find a friend
            User friend = await user.FindUser("MyFriend");
            await newGroup.AddUserAsync(friend);
</code></example></summary>
    </member>
    <member name="M:Buddy.MessageGroup.JoinAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            This method has the current user join this message group.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroup.LeaveAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            This methods has the current user leave this message group.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroup.AddUserAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.User,System.Object)">
      <summary>
            Add a user to this message group. 
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="userToAdd">The User to add to the message group.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroup.RemoveUserAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.User,System.Object)">
      <summary>
            Remove a user from this message group.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="userToRemove">The user to remove from the group.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroup.SendMessageAsync(System.Action{System.Collections.Generic.Dictionary{System.Int32,System.Boolean},Buddy.BuddyCallbackParams},System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Send a message to the entire message group.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a map of users and a boolean indicating whether the message was successfully sent to them.</param>
      <param name="message">The message to send to this group. Must be less then 1000 characters.</param>
      <param name="latitude">The optional latitude from where this message was sent.</param>
      <param name="longitude">The optional longitude from where this message was sent.</param>
      <param name="appTag">An optional application tag for this message.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroup.GetReceivedAsync(System.Action{System.Collections.Generic.List{Buddy.GroupMessage},Buddy.BuddyCallbackParams},System.DateTime,System.Object)">
      <summary>
            Get all messages this group has received.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of messages the group has received.</param>
      <param name="afterDate">Optionally return only messages sent after this date.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroup.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete this message group.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.MessageGroup.ID">
      <summary>
            Gets the App unique ID of the message group.
            </summary>
    </member>
    <member name="P:Buddy.MessageGroup.Name">
      <summary>
            Gets the name of the message group.
            </summary>
    </member>
    <member name="P:Buddy.MessageGroup.CreatedOn">
      <summary>
            Gets the DateTime the message group was created.
            </summary>
    </member>
    <member name="P:Buddy.MessageGroup.AppTag">
      <summary>
            Gets the app tag that was associated with this message group.
            </summary>
    </member>
    <member name="P:Buddy.MessageGroup.OwnerUserID">
      <summary>
            Gets the ID of the user that created this message group.
            </summary>
    </member>
    <member name="P:Buddy.MessageGroup.MemberUserIDs">
      <summary>
            Gets a list of IDs of users that belong to this message group.
            </summary>
    </member>
    <member name="T:Buddy.MessageGroups">
      <summary>
            Represents an object that can be used to create or query message groups for the app.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            MessageGroup group = await user.Messages.Groups.CreateAsync("My New Group", true);
</code></example></summary>
    </member>
    <member name="M:Buddy.MessageGroups.CreateAsync(System.Action{Buddy.MessageGroup,Buddy.BuddyCallbackParams},System.String,System.Boolean,System.String,System.Object)">
      <summary>
            Create a new message group.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the Group that was create or null if a group with that name already exists.</param>
      <param name="name">The name of the new group, must be unique for the app.</param>
      <param name="openGroup">Optionally whether to make to group open for all user (anyone can join), or closed (only the owner can add users to it).</param>
      <param name="appTag">An optional application tag for this message group.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroups.CheckIfExistsAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Check if a group with this name already exists.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the group exists, false otherwise.</param>
      <param name="name">The name of the group to check for.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroups.GetAllAsync(System.Action{System.Collections.Generic.List{Buddy.MessageGroup},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get all message groups for this app.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of message groups on success.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MessageGroups.GetMyAsync(System.Action{System.Collections.Generic.List{Buddy.MessageGroup},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get all message groups that this user is part of.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of message groups.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Messages">
      <summary>
            Represents an object that can be used to send message from one user to another.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            var success = await user.Messages.SendAsync(someOtherUser, "Hello friend!");
</code></example></summary>
    </member>
    <member name="M:Buddy.Messages.SendAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.User,System.String,System.String,System.Object)">
      <summary>
            Send a message to a user from the current authenticated user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="toUser">The user to send a message to.</param>
      <param name="message">The message to send, must be less then 200 characters.</param>
      <param name="appTag">An optional application tag to set for the message.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Messages.GetReceivedAsync(System.Action{System.Collections.Generic.List{Buddy.Message},Buddy.BuddyCallbackParams},System.DateTime,System.Object)">
      <summary>
            Get all received message by the current user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of messages that the user received.</param>
      <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Messages.GetSentAsync(System.Action{System.Collections.Generic.List{Buddy.Message},Buddy.BuddyCallbackParams},System.DateTime,System.Object)">
      <summary>
            Get all sent message by the current user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of messages that the user sent.</param>
      <param name="afterDate">Optionally retreive only messages after a certain DateTime.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Notifications">
      <summary>
            Represents an object that you can use to send or recieve push notifications. Note that you can only recieve phone notifications on Windows Phone or Windows 8 Metro Apps.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            var registrationSuccess = await user.PushNotifications.RegisterDeviceAsync(deviceUri);

            // send a toast to yourself.
            var success = await user.PushNotifications.SendToastMessageAsync("A toast!", "Send from Buddy", user.ID);
</code></example></summary>
    </member>
    <member name="M:Buddy.Notifications.RegisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Object)">
      <summary>
            Register a Windows device for notificatons with Buddy. The URL is the notifications channel link that provided by the platform. Most of the time
            you don't need to call this API directly, you can use ConfigurePushAsync instead which will configure everyting for you. Note that if you call this method,
            you are responsible to configure the device for push notifications.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="deviceUri">The device notification channel URI.</param>
      <param name="enableTile">Optionally enable tile notifications</param>
      <param name="enableRaw">Optionally enable raw notifications.</param>
      <param name="enableToast">Optionally enable toast notifications.</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.UnregisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Unregister the current user from push notifications.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.GetRegisteredDevicesAsync(System.Action{System.Collections.Generic.List{Buddy.RegisteredDevice},Buddy.BuddyCallbackParams},System.String,System.Int32,System.Int32,System.Object)">
      <summary>
            Get a paged list of registered devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.GetGroupsAsync(System.Action{System.Collections.Generic.Dictionary{System.String,System.Int32},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get a list of groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.SendTileAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.Int32,System.String,System.DateTime,System.String,System.Object)">
      <summary>
            Send a image tile to a windows phone device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="imageUri">The URL of the tile image.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="messageCount">The message count for this tile.</param>
      <param name="messageTitle">The message title for the tile.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.SendRawMessageAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.DateTime,System.String,System.Object)">
      <summary>
            Send a raw message to a windows phone device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="rawMessage">The message to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.SendToastMessageAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Int32,System.String,System.DateTime,System.String,System.Object)">
      <summary>
            Send toast message to a windows phone device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="toastTitle">The title of the toast message/</param>
      <param name="toastSubtitle">The subtitle of the toast message.</param>
      <param name="toastParameter">An optional parameter for the toast message.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.RegisterDeviceAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Register a Windows device for notificatons with Buddy. The URL is the notifications channel link that provided by the platform. Most of the time
            you don't need to call this API directly, you can use ConfigurePushAsync instead which will configure everyting for you. Note that if you call this method,
            you are responsible to configure the device for push notifications.
            </summary>
      <param name="deviceUri">The device notification channel URI.</param>
      <param name="enableTile">Optionally enable tile notifications</param>
      <param name="enableRaw">Optionally enable raw notifications.</param>
      <param name="enableToast">Optionally enable toast notifications.</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.UnregisterDeviceAsync">
      <summary>
            Unregister the current user from push notifications.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.GetRegisteredDevicesAsync(System.String,System.Int32,System.Int32)">
      <summary>
            Get a paged list of registered devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <returns>A Task&lt;IEnumerable&lt;RegisteredDevice&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.GetGroupsAsync">
      <summary>
            Get a list of groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,Int32&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.SendTileAsync(System.String,System.Int32,System.Int32,System.String,System.DateTime,System.String)">
      <summary>
            Send a image tile to a windows phone device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
      <param name="imageUri">The URL of the tile image.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="messageCount">The message count for this tile.</param>
      <param name="messageTitle">The message title for the tile.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.SendRawMessageAsync(System.String,System.Int32,System.DateTime,System.String)">
      <summary>
            Send a raw message to a windows phone device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
      <param name="rawMessage">The message to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.SendToastMessageAsync(System.String,System.String,System.Int32,System.String,System.DateTime,System.String)">
      <summary>
            Send toast message to a windows phone device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
      <param name="toastTitle">The title of the toast message/</param>
      <param name="toastSubtitle">The subtitle of the toast message.</param>
      <param name="toastParameter">An optional parameter for the toast message.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Notifications.ConfigurePushAsync(System.Boolean,System.Boolean,System.String,System.Collections.Generic.List{System.String},System.Action{System.String},System.Action{System.Collections.Generic.IDictionary{System.String,System.String}},System.String)">
      <summary>
            Configure this Windows Phone device for push notifications
            </summary>
      <param name="channelName"></param>
      <param name="enableTiles"></param>
      <param name="enableToastMessages"></param>
      <param name="groupName"></param>
      <param name="allowedDomains"></param>
      <param name="rawMessageCallback"></param>
      <param name="toastMessageCallback"></param>
    </member>
    <member name="T:Buddy.Device">
      <summary>
            Represents an object that can be used to record device analytics, like device types and app crashes.
            <example><code>
// false is passed in here because we are explicitly recording information below
            BuddyClient client = new BuddyClient("APPNAME", "APPPASS", "APPVERSION", false);

            AuthenticatedUser user = await client.LoginAsync("username", "password");
        
            var success = await client.Device.RecordInformationAsync(
                        System.Environment.OSVersion.Version.ToString(),
                        DeviceExtendedProperties.GetValue("DeviceName").ToString(),user);

// On WinPhone 7 app.xaml.cs global exception handler

        private async void Application_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)
        {

            BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");


            
            // in global unhandled exception handler
            //
            var success = await client.Device.RecordCrashAsync("SomeMethod", System.Environment.OSVersion.Version.ToString(), e.ExceptionObject.Message, user);

            // if desired, prevent the app from crashing.
            e.Handled = true;
        
          
        }
</code></example></summary>
    </member>
    <member name="M:Buddy.Device.RecordInformationAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,Buddy.AuthenticatedUser,System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Record runtine device type information. This info will be uploaded to the Buddy service and can later be used for analytics purposes.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
      <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
      <param name="user">The user that's registering this device information.</param>
      <param name="appVersion">The optional version of this application.</param>
      <param name="latitude">The optional latitude where this report was submitted.</param>
      <param name="longitude">The optional longiture where this report was submitted.</param>
      <param name="metadata">An optional application specific metadata string to include with the report.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Device.RecordCrashAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.String,Buddy.AuthenticatedUser,System.String,System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Record runtime crash information for this app. This could be exceptions, errors or your own custom crash information.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="methodName">The method name or location where the error happend. This could also be a descriptive string of the error.</param>
      <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
      <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
      <param name="user">The user that's registering this device information.</param>
      <param name="stackTrace">The optional stack trace of where the error happened.</param>
      <param name="appVersion">The optional version of this application.</param>
      <param name="latitude">The optional latitude where this report was submitted.</param>
      <param name="longitude">The optional longiture where this report was submitted.</param>
      <param name="metadata">An optional application specific metadata string to include with the report.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Device.RecordInformationAsync(System.String,System.String,Buddy.AuthenticatedUser,System.String,System.Double,System.Double,System.String)">
      <summary>
            Record runtine device type information. This info will be uploaded to the Buddy service and can later be used for analytics purposes.
            </summary>
      <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
      <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
      <param name="user">The user that's registering this device information.</param>
      <param name="appVersion">The optional version of this application.</param>
      <param name="latitude">The optional latitude where this report was submitted.</param>
      <param name="longitude">The optional longiture where this report was submitted.</param>
      <param name="metadata">An optional application specific metadata string to include with the report.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Device.RecordCrashAsync(System.String,System.String,System.String,Buddy.AuthenticatedUser,System.String,System.String,System.Double,System.Double,System.String)">
      <summary>
            Record runtime crash information for this app. This could be exceptions, errors or your own custom crash information.
            </summary>
      <param name="methodName">The method name or location where the error happend. This could also be a descriptive string of the error.</param>
      <param name="osVersion">The OS version of the device runnign this code. On some .NET platforms you can use System.Environment.OSVersion to get this information.</param>
      <param name="deviceType">The type of device running this app. On Windows Phone 7 for example you can use DeviceExtendedProperties to retrieve this information.</param>
      <param name="user">The user that's registering this device information.</param>
      <param name="stackTrace">The optional stack trace of where the error happened.</param>
      <param name="appVersion">The optional version of this application.</param>
      <param name="latitude">The optional latitude where this report was submitted.</param>
      <param name="longitude">The optional longiture where this report was submitted.</param>
      <param name="metadata">An optional application specific metadata string to include with the report.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.FriendRequests">
      <summary>
            Represents a collection of friend requests. Use the Add method to request a friend connection from another user.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            // create two users and connect them as friends
           
           
            client.CreateUserAsync("username", "password").ContinueWith(r1 =&gt; {
                AuthenticatedUser user1 = r1.Result;
                 client.CreateUserAsync("username2", "password2").ContinueWith(r2 =&gt; {
                     var user2 = r2.Result;
                     user1.Friends.Requests.AddAsync(user2).ContinueWith(r3 =&gt; {
                        user2.Friends.Requests.AcceptAsync(user1);
                     });
                 });
            });
</code></example></summary>
    </member>
    <member name="M:Buddy.FriendRequests.AddAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.User,System.String,System.Object)">
      <summary>
            Add a friend request to a user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the friend request was added, false otherwise.</param>
      <param name="user">The user to send the request to, can't be null.</param>
      <param name="appTag">Mark this request with an tag, can be used on the user's side to make a decision on whether to accept the request.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendRequests.GetAllAsync(System.Action{System.Collections.Generic.List{Buddy.User},Buddy.BuddyCallbackParams},System.DateTime,System.Object)">
      <summary>
            A list of all users that have request to be friends with this user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first paramater is a list of users that have pending friend requests.</param>
      <param name="afterDate">Filter the list by returning only the friend requests after a ceratin date.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendRequests.AcceptAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.User,System.String,System.Object)">
      <summary>
            Accept a friend request from a user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the friend request was accepted, false otherwise (i.e. the user doesn't exist).</param>
      <param name="user">The user to accept as friend. Can't be null and must be on the friend requests list.</param>
      <param name="appTag">Tag this friend accept with a string.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.FriendRequests.DenyAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.User,System.Object)">
      <summary>
            Deny the friend request from a user.
            </summary>
      <param name="callback">The async callback to call on success or error. First parameter is true if the friend request was accepted, 
            false otherwise (i.e. user is not on the friends request list).</param>
      <param name="user">The user to deny the friend request from. User can't be null and must be on the friend request list.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Friends">
      <summary>
            Represents a collection of friends. Use the AuthenticatedUser.Friends property to access this object.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");


            client.CreateUserAsync("username", "password").ContinueWith(r1 =&gt;
            {
                AuthenticatedUser user1 = r1.Result;
                client.CreateUserAsync("username2", "password2").ContinueWith(r2 =&gt;
                {
                    var user2 = r2.Result;
                    user1.Friends.Requests.AddAsync(user2).ContinueWith(r3 =&gt;
                    {
                        user2.Friends.Requests.AcceptAsync(user1);
                    });
                });
            });
</code></example></summary>
    </member>
    <member name="M:Buddy.Friends.GetAllAsync(System.Action{System.Collections.Generic.List{Buddy.User},Buddy.BuddyCallbackParams},System.DateTime,System.Object)">
      <summary>
            Returns the list of friends for the user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of users.</param>
      <param name="afterDate">Filter the list by friends added 'afterDate'.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Friends.RemoveAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.User,System.Object)">
      <summary>
            Remove a user from the current list of friends.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the user was remove from the list, false otherwise.</param>
      <param name="user">The user to remove from the friends list. Must be already on the list and can't be null.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.Friends.Requests">
      <summary>
            Gets a list of friend requests that are still pending for this user.
            </summary>
    </member>
    <member name="T:Buddy.Identity">
      <summary>
            Represents a class that can access identity values for a user or search for values accross the entire app. Identity values can be used to share public 
            information between users, for example hashes of email address that can be used to check whether a certain user is in the system.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            client.LoginAsync("username", "password").ContinueWith(r =&gt;{
                AuthenticatedUser user = r.Result;
                user.IdentityValues.GetAllAsync().ContinueWith(r2 =&gt; {
                    var identityCount = r2.Result.Count();
                });
            });
</code></example></summary>
    </member>
    <member name="M:Buddy.Identity.GetAllAsync(System.Action{System.Collections.Generic.List{Buddy.IdentityItem},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Returns all the identity values for this user.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of identity values.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Identity.AddAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Add an identity value for this user.
            </summary>
      <param name="value">The value to add.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the value was added, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Identity.RemoveAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Remove an identity value for this user.
            </summary>
      <param name="value">The value to remove.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the value was removed, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Identity.CheckForValuesAsync(System.Action{System.Collections.Generic.List{Buddy.IdentityItemSearchResult},Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Check for the existance of an identity value in the system. The search is perform for the entire app.
            </summary>
      <param name="values">The value to search for. This can either be a single value or a semi-colon separated list of values.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of identity values that were found.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.IdentityItem">
      <summary>
            Represents an identity item that belongs to a user.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            AuthenticatedUser user = await client.LoginAsync("username", "password");


            IEnumerable&lt;IdentityItem&gt; identityValues = await user.IdentityValues.GetAllAsync();
</code></example></summary>
    </member>
    <member name="P:Buddy.IdentityItem.Value">
      <summary>
            Gets the value of the identity item.
            </summary>
    </member>
    <member name="P:Buddy.IdentityItem.CreatedOn">
      <summary>
            Gets the date the identity value was added.
            </summary>
    </member>
    <member name="T:Buddy.IdentityItemSearchResult">
      <summary>
            Represents a single identity search result. Use the AuthenticatedUser.IdentityValues.CheckForValues() method to search for items. A search item
            can belong to any user in the system. 
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // search for an indentity value.
            IEnumerable&lt;IdentityItem&gt; items = await user.IdentityValues.CheckForValuesAsync("somevalue");
</code></example></summary>
    </member>
    <member name="P:Buddy.IdentityItemSearchResult.Found">
      <summary>
            Gets whether the specific item was found.
            </summary>
    </member>
    <member name="P:Buddy.IdentityItemSearchResult.BelongsToUserId">
      <summary>
            Gets the ID of the user the item was found on.
            </summary>
    </member>
    <member name="T:Buddy.MetadataItem">
      <summary>
            Represents a single item of metadata. Metadata is used to store custom key/value pairs at the application or user level.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            var user = await client.LoginAsync("username", "password");
            MetadataItem metadataItem = await user.Metadata.GetAsync("some key");

            await metadataItem.SetAsync("some new value");
</code></example></summary>
    </member>
    <member name="M:Buddy.MetadataItem.SetAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Updates the value of this metadata item.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is true if the update was successful, false otherwise.</param>
      <param name="value">The new value for this item, can't be null.</param>
      <param name="latitude">The optional latitude for this item.</param>
      <param name="longitude">The optional longitude for this item.</param>
      <param name="appTag">The optional application tag for this item.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.MetadataItem.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Deletes this metadata item.
            </summary>
      <param name="callback">The callback to call when this method completes. The first parameter is true if the item was deleted, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.MetadataItem.Key">
      <summary>
            Gets the key for this item.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.Value">
      <summary>
            Gets the value for this item.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.Latitude">
      <summary>
            Gets the latitude of this item.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.Longitude">
      <summary>
            Gets the longitude of this item.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.LastUpdateOn">
      <summary>
            Gets the last date this item was updated.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.ApplicationTag">
      <summary>
            Gets a custom application Tag for this item.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.DistanceOriginLatitude">
      <summary>
            Gets the latitude of the origin that was used in the metadata search.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.DistanceOriginLongitude">
      <summary>
            Gets the longitude of the origin that was used in the metadata search.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.DistanceInKilometers">
      <summary>
            Gets the distance in kilo-meters from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.DistanceInMeters">
      <summary>
            Gets the distance in meters from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.DistanceInMiles">
      <summary>
            Gets the distance in miles from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="P:Buddy.MetadataItem.DistanceInYards">
      <summary>
            Gets the distance in yards from the given origin in the Metadata Search method.
            </summary>
    </member>
    <member name="T:Buddy.MetadataSum">
      <summary>
            Represents the sum of a collection of metadata items with a similar key.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            bool success = await client.Metadata.SetAsync("Test count1", "10");
            success = await client.Metadata.SetAsync("Test count2", "20");
            success = await client.Metadata.SetAsync("Test count3", "30");

            // later
            MetadataSum sum = await client.Metadata.SumAsync("Test count");
            var total = sum.Total;
</code></example></summary>
    </member>
    <member name="P:Buddy.MetadataSum.Total">
      <summary>
            Gets the total sum of the metadata items.
            </summary>
    </member>
    <member name="P:Buddy.MetadataSum.KeysCounted">
      <summary>
            Gets the number of items that were summed.
            </summary>
    </member>
    <member name="P:Buddy.MetadataSum.Key">
      <summary>
            Gets the common key that was used to produce this sum.
            </summary>
    </member>
    <member name="T:Buddy.NotificationsAndroid">
      <summary>
            Represents an object that can be used to register Android devices for push notifications. The class can also be used to query for all registered devices and
            to send them notifications.
            </summary>
    </member>
    <member name="M:Buddy.NotificationsAndroid.RegisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Object)">
      <summary>
            Register an Android device for notificatons with Buddy. 
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="registrationID">The registration ID for the application currently running on the device. Note: this is the registration ID returned after registering with C2DM.</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroid.UnregisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Unregister the current user from push notifications for Android.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroid.GetRegisteredDevicesAsync(System.Action{System.Collections.Generic.List{Buddy.RegisteredDeviceAndroid},Buddy.BuddyCallbackParams},System.String,System.Int32,System.Int32,System.Object)">
      <summary>
            Get a paged list of registered Android devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroid.GetGroupsAsync(System.Action{System.Collections.Generic.Dictionary{System.String,System.Int32},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get a list of Android groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsAndroid.SendRawMessageAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.DateTime,System.String,System.Object)">
      <summary>
            Send a raw message to a Android device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="rawMessage">The message to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.NotificationsApple">
      <summary>
            Represents an object that can be used to register Apple devices for push notifications. The class can also be used to query for all registered devices and
            to send them notifications.
            </summary>
    </member>
    <member name="M:Buddy.NotificationsApple.RegisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Object)">
      <summary>
            Register an Apple device for notificatons with Buddy. 
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="appleDeviceToken">A token provided by the Apple Push Notification Service (APNs) which identifies the device to register (analogous to a phone number).</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsApple.UnregisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Unregister the current user from push notifications for Apple devices.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsApple.GetRegisteredDevicesAsync(System.Action{System.Collections.Generic.List{Buddy.RegisteredDeviceApple},Buddy.BuddyCallbackParams},System.String,System.Int32,System.Int32,System.Object)">
      <summary>
            Get a paged list of registered Apple devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsApple.GetGroupsAsync(System.Action{System.Collections.Generic.Dictionary{System.String,System.Int32},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get a list of Apple groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsApple.SendRawMessageAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Int32,System.String,System.String,System.String,System.String,System.DateTime,System.String,System.Object)">
      <summary>
            Send a raw message to a Apple device. Note that this call does not directly send the message but rather, adds the raw message to the queue of messages to be sent.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="message">The message to send to the user.</param>
      <param name="badge">The badge number to set on the icon. It is the application's responsibility to determine what number to set.</param>
      <param name="sound">The notification sound to play.</param>
      <param name="customItems">Metadata to send with the message for the receiving application to use. Data should be specified as key/value pairs where each key and value are seperated by a comma and each pair is seperated by a ";" character including the last pair ie: key,value;key,value;. Leave empty or set to null if there is no metadata to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.NotificationsWin8">
      <summary>
            Represents an object that can be used to register Win8 devices for push notifications. The class can also be used to query for all registered devices and
            to send them notifications.
            </summary>
    </member>
    <member name="M:Buddy.NotificationsWin8.RegisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.String,System.String,System.Object)">
      <summary>
            Register an Win8 device for notificatons with Buddy. 
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="deviceUri">The URI for the device as returned by the Windows push phone HttpNotificationChannel object.</param>
      <param name="clientId">The Package Security Identifier (SID) acquired when the app was registered with the Windows Store Dashboard. </param>
      <param name="clientSecret">The secret key corresponding to the SID acquired when the app was registered with the Windows Store Dashboard.</param>
      <param name="groupName">Register this device as part of a group, so that you can send the whole group messages.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8.UnregisterDeviceAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Unregister the current user from push notifications for Win8 devices.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8.GetRegisteredDevicesAsync(System.Action{System.Collections.Generic.List{Buddy.RegisteredDeviceWin8},Buddy.BuddyCallbackParams},System.String,System.Int32,System.Int32,System.Object)">
      <summary>
            Get a paged list of registered Win8 devices for this Application. This list can then be used to iterate over the devices and send each user a push notification.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of registered devices with user IDs. You can then user the IDs to send notifications to those users.</param>
      <param name="forGroup">Optionally filter only devices in a certain group.</param>
      <param name="pageSize">Set the number of devices that will be returned for each call of this method.</param>
      <param name="currentPage">Set the current page.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8.GetGroupsAsync(System.Action{System.Collections.Generic.Dictionary{System.String,System.Int32},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get a list of Win8 groups that have been registered with Buddy as well as the number of users in each group. Groups can be used to batch-send
            push notifications to a number of users at the same time.
            <param name="callback">The async callback to call on success or error. The first parameter is a list of group names with counts per group.</param></summary>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8.SendTileAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.DateTime,System.String,System.Object)">
      <summary>
            Send a image tile to a Win8 device. The tile is represented by a image URL, you can take a look at the Windows phone docs for image dimensions and formats.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8.SendBadgeAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.DateTime,System.String,System.Object)">
      <summary>
            Send a badge to a windows 8 device. The app needs to be active and the Raw message callback set in order to recieve this message.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="xmlPayload">The message to send.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.NotificationsWin8.SendToastMessageAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Int32,System.DateTime,System.String,System.Object)">
      <summary>
            Send toast message to a windows 8 device. If the app is active the user will recieve this message in the toast message callback. Otherwise the message
            appears as a notification on top of the screen. Clicking it will launch the app.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="xmlPayload">The xml schema describing the tile. Can be specified in the URL using proper character escaping or via the message body. For more information <see href="http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx" />.</param>
      <param name="senderUserId">The ID of the user that sent the notification.</param>
      <param name="deliverAfter">Schedule the message to be delivered after a certain date.</param>
      <param name="groupName">Send messages to an entire group of users, not just a one.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.PhotoAlbum">
      <summary>
            Represent a single Buddy photo album. Albums are collections of photo that can be manipulated by their owner (the user that created the album). Albums
            can be public in which case other users can see them (but no modify).
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            PhotoAlbum album = await user.PhotoAlbums.GetAsync("My Album");

            var photoStream = LoadPhoto();
            var success = await album.AddPictureAsync(photoStream, "A great photo!");
</code></example></summary>
    </member>
    <member name="T:Buddy.PhotoAlbumPublic">
      <summary>
            Represents a public photo album. Public albums are returned from album searches.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // get all albums for a user
            var albums = await user.PhotoAlbums.GetAllAsync();

            // create a new album
            PhotoAlbum newAlbum = await user.PhotoAlbums.CreateAsync("My New Album");
</code></example></summary>
    </member>
    <member name="P:Buddy.PhotoAlbumPublic.UserId">
      <summary>
            Gets the user ID of the user that owns this album.
            </summary>
    </member>
    <member name="P:Buddy.PhotoAlbumPublic.AlbumName">
      <summary>
            Gets the name of the album
            </summary>
    </member>
    <member name="P:Buddy.PhotoAlbumPublic.Pictures">
      <summary>
            Gets a list of pictures in this album.
            </summary>
    </member>
    <member name="M:Buddy.PhotoAlbum.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete this photo album.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if successful, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbum.AddPictureAsync(System.Action{Buddy.Picture,Buddy.BuddyCallbackParams},System.Byte[],System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="blob">The image byte array of the picture.</param>
      <param name="comment">An optional comment for this picture.</param>
      <param name="latitude">An optional latitude for the picture.</param>
      <param name="longitude">An optional longitude for the picture.</param>
      <param name="appTag">An optional application tag.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is the new picture that was added or null on error.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbum.AddPictureWithWatermarkAsync(System.Action{Buddy.Picture,Buddy.BuddyCallbackParams},System.Byte[],System.String,System.Double,System.Double,System.String,System.String,System.Object)">
      <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the new picture that was added or null on error.</param>
      <param name="blob">The image byte array of the picture.</param>
      <param name="comment">An optional comment for this picture.</param>
      <param name="latitude">An optional latitude for the picture.</param>
      <param name="longitude">An optional longitude for the picture.</param>
      <param name="appTag">An optional application tag.</param>
      <param name="watermarkmessage">An optional message to watermark the image with.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbum.DeleteAsync">
      <summary>
            Delete this photo album.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbum.AddPictureAsync(System.IO.Stream,System.String,System.Double,System.Double,System.String)">
      <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="photoStream">A stream containing the photo's contents..</param>
      <param name="comment">An optional comment for this picture.</param>
      <param name="latitude">An optional latitude for the picture.</param>
      <param name="longitude">An optional longitude for the picture.</param>
      <param name="appTag">An optional application tag.</param>
      <returns>A Task&lt;Picture&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbum.AddPictureWithWatermarkAsync(System.IO.Stream,System.String,System.Double,System.Double,System.String,System.String)">
      <summary>
            Add a new picture to this album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="photoStream">A stream containing the photo's contents..</param>
      <param name="comment">An optional comment for this picture.</param>
      <param name="latitude">An optional latitude for the picture.</param>
      <param name="longitude">An optional longitude for the picture.</param>
      <param name="appTag">An optional application tag.</param>
      <param name="watermarkmessage">An optional message to watermark the image with.</param>
      <returns>A Task&lt;Picture&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.PhotoAlbum.Pictures">
      <summary>
            Gets a readonly collection of pictures in this album. Use the AddPicture method to add more pictures to the album or the Picture.Delete method
            to remove them.
            </summary>
    </member>
    <member name="P:Buddy.PhotoAlbum.AlbumId">
      <summary>
            Gets the global unique album ID.
            </summary>
    </member>
    <member name="T:Buddy.PhotoAlbums">
      <summary>
            Represents a object that can be used to interact with an AuthenticatedUser's photo albums.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // get all the albums.
            IEnumerable&lt;PhotoAlbum&gt; albums = await user.PhotoAlbums.GetAllAsync();
</code></example></summary>
    </member>
    <member name="M:Buddy.PhotoAlbums.CreateAsync(System.Action{Buddy.PhotoAlbum,Buddy.BuddyCallbackParams},System.String,System.Boolean,System.String,System.Object)">
      <summary>
            This method is used create a new album. The album will be owned by this user. Multiple albums can be created with the same name. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the new photo album that was created, null if an error occured.</param>
      <param name="name">The name of the new album.</param>
      <param name="isPublic">Make the album publicly visible to other users.</param>
      <param name="appTag">Optionally add a custom application tag for this user.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbums.GetAsync(System.Action{Buddy.PhotoAlbum,Buddy.BuddyCallbackParams},System.Int32,System.Object)">
      <summary>
            Get a photo album by ID. This album doesn't need to be owned by this user.
            </summary>
      <param name="albumId">The ID of the album.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is the photo album if successful, null otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbums.GetAsync(System.Action{Buddy.PhotoAlbum,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Get a photo album by its name. Note that there can be more than one album with the same name. This method will only return the first one.
            Call PhotoAlbums.All to get all the albums.
            </summary>
      <param name="albumName">The name of the albul to retrieve. Can't be null or empty.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is the PhotoAlbum if found, null otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbums.GetAllAsync(System.Action{System.Collections.Generic.List{Buddy.PhotoAlbum},Buddy.BuddyCallbackParams},System.DateTime,System.Object)">
      <summary>
            Return all photo albums for this user. Note that this can be an expensive operation since all the Picture data is retrieved as well.
            </summary>
      <param name="afterDate">Optionally return all albums created after a date.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of photo albums that this user owns.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbums.CreateAsync(System.String,System.Boolean,System.String)">
      <summary>
            This method is used create a new album. The album will be owned by this user. Multiple albums can be created with the same name. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="name">The name of the new album.</param>
      <param name="isPublic">Make the album publicly visible to other users.</param>
      <param name="appTag">Optionally add a custom application tag for this user.</param>
      <returns>A Task&lt;PhotoAlbum&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbums.GetAsync(System.Int32)">
      <summary>
            Get a photo album by ID. This album doesn't need to be owned by this user.
            </summary>
      <param name="albumId">The ID of the album.</param>
      <returns>A Task&lt;PhotoAlbum&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbums.GetAsync(System.String)">
      <summary>
            Get a photo album by its name. Note that there can be more than one album with the same name. This method will only return the first one.
            Call PhotoAlbums.All to get all the albums.
            </summary>
      <param name="albumName">The name of the albul to retrieve. Can't be null or empty.</param>
      <returns>A Task&lt;PhotoAlbum&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.PhotoAlbums.GetAllAsync(System.DateTime)">
      <summary>
            Return all photo albums for this user. Note that this can be an expensive operation since all the Picture data is retrieved as well.
            </summary>
      <param name="afterDate">Optionally return all albums created after a date.</param>
      <returns>A Task&lt;IEnumerable&lt;PhotoAlbum&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Picture">
      <summary>
            Represents a single picture on the Buddy Platform. Pictures can be accessed through an AuthenticatedUser, either by using the PhotoAlbums property to retrieve
            Pictures that belong to the user, or using the SearchForAlbums method to find public Pictures.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // get an album
            PhotoAlbum album = await user.PhotoAlbums.GetAsync(albumId);

            // list the photos
            //
            IEnumerable&lt;Picture&gt; photos = album.Pictures;
</code></example></summary>
    </member>
    <member name="T:Buddy.PicturePublic">
      <summary>
            Represents a single picture on the Buddy Platform. This is a public view of a picture, can be retrieve either by getting a User's profile pictures or 
            by searching for albums.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // get existing photos
            IEnumerable&lt;PicturePublic&gt; profilePhotos = await user.GetProfilePhotosAsync();
           
            // add a profile photo
            Stream newPhoto = LoadPhoto();
            var success = await user.AddProfilePhotoAsync(newPhoto);
</code></example></summary>
    </member>
    <member name="P:Buddy.PicturePublic.FullUrl">
      <summary>
            Gets the url of the full picture.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.ThumbnailUrl">
      <summary>
            Gets the url of the thumbnail of the picture.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.Latitude">
      <summary>
            Gets the latitude of the picture location.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.Longitude">
      <summary>
            Gets the longitude of the picture location.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.Comment">
      <summary>
            Gets the optional comment of the picture.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.AppTag">
      <summary>
            Gets the optional application tag of the picture.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.AddedOn">
      <summary>
            Gets the date when this picture was added.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.PhotoID">
      <summary>
            Gets the system-wide ID of the picture.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.DistanceInKilometers">
      <summary>
            If this picture was returned as part of an album search, gets the distance in kilometers from the location that was used as the origin of the search.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.DistanceInMeters">
      <summary>
            If this picture was returned as part of an album search, gets the distance in meters from the location that was used as the origin of the search.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.DistanceInMiles">
      <summary>
            If this picture was returned as part of an album search, gets the distance in miles from the location that was used as the origin of the search.
            </summary>
    </member>
    <member name="P:Buddy.PicturePublic.DistanceInYards">
      <summary>
            If this picture was returned as part of an album search, gets the distance in yards from the location that was used as the origin of the search.
            </summary>
    </member>
    <member name="M:Buddy.Picture.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete this picture. Note that this object will no longer be valid after this method is called. Subsequent calls will fail.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the picture was deleted, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Picture.SupportedFiltersAsync(System.Action{System.Collections.Generic.Dictionary{System.String,System.String},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Returns a list of supported filters that can be applied to this picture. Example filters are: Hue Shift, Crop, etc.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of supported filters.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Picture.ApplyFilterAsync(System.String,System.String,System.Action{Buddy.Picture,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Apply a filter to this picture. A new picture is created and returned after the filter is applied. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="filterName">The name of the filter to apply. Cant't be null or empty.</param>
      <param name="filterParams">A semi-colon seperated list of filter parameter names and values. For example: "CropLeft=30;CropRight=40."</param>
      <param name="callback">The async callback to call on success or error. The first parameter is a new picture with the filter applied.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Picture.SetAppTagAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Sets the app tag on this picture.
            </summary>
      <param name="appTag">The app tag.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the app tag was added, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Picture.DeleteAsync">
      <summary>
            Delete this picture. Note that this object will no longer be valid after this method is called. Subsequent calls will fail.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Picture.SupportedFiltersAsync">
      <summary>
            Returns a list of supported filters that can be applied to this picture. Example filters are: Hue Shift, Crop, etc.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,String&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Picture.SetAppTagAsync(System.String)">
      <summary>
            Sets the app tag on this picture.
            </summary>
      <param name="appTag">The app tag.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Place">
      <summary>
            Represents a single, named location in the Buddy system that's not a user. Locations are related to stores, hotels, parks, etc.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // find all the places within 10k of a location
            IEnumerable&lt;Place&gt; places = await user.Places.FindAsync(10000, 47.7, -122.2);
</code></example></summary>
    </member>
    <member name="M:Buddy.Place.SetTagAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Object)">
      <summary>
            Set an application specific tag or a user tag for a place.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="appTag">The application level tag to set.</param>
      <param name="userTag">The user-level tag to set for this Place.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.Place.Address">
      <summary>
            Gets the address of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.AppTagData">
      <summary>
            Gets the custom application tag data for the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.CategoryID">
      <summary>
            Gets the category ID of the location (i.e. Hotels).
            </summary>
    </member>
    <member name="P:Buddy.Place.CategoryName">
      <summary>
            Gets the category name for the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.City">
      <summary>
            Gets the city for the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.CreatedDate">
      <summary>
            Gets the date the location was created in the system.
            </summary>
    </member>
    <member name="P:Buddy.Place.DistanceInKilometers">
      <summary>
            If this user profile was returned from a search, gets the distance in kilometers from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.Place.DistanceInMeters">
      <summary>
            If this user profile was returned from a search, gets the distance in meters from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.Place.DistanceInMiles">
      <summary>
            If this user profile was returned from a search, gets the distance in miles from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.Place.DistanceInYards">
      <summary>
            If this user profile was returned from a search, gets the distance in yards from the search origin.
            </summary>
    </member>
    <member name="P:Buddy.Place.Fax">
      <summary>
            Gets the fax number of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.ID">
      <summary>
            Gets the globaly unique ID of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.Latitude">
      <summary>
            Gets the latitude of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.Longitude">
      <summary>
            Gets the longitude of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.Name">
      <summary>
            Gets the name of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.PostalState">
      <summary>
            Gets the postal state of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.PostalZip">
      <summary>
            Gets the postal ZIP of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.Region">
      <summary>
            Gets the region of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.ShortID">
      <summary>
            Gets the ShortID of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.Telephone">
      <summary>
            Gets the telephone number of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.TouchedDate">
      <summary>
            Gets the last update date of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.UserTagData">
      <summary>
            Gets the user tag data of the location.
            </summary>
    </member>
    <member name="P:Buddy.Place.Website">
      <summary>
            Gets the website of the location.
            </summary>
    </member>
    <member name="T:Buddy.Places">
      <summary>
            Represents an object that can be used to search for physical locations around the user.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

          
            client.LoginAsync("username", "password").ContinueWith(r =&gt;  {
                AuthenticatedUser user = r.Result;
                user.Places.FindAsync(100000, 0.0, 0.0).ContinueWith(r2 =&gt; {
                    var places = r2.Result;
                });
               
            });
</code></example></summary>
    </member>
    <member name="M:Buddy.Places.FindAsync(System.Action{System.Collections.Generic.List{Buddy.Place},Buddy.BuddyCallbackParams},System.Int32,System.Double,System.Double,System.Int32,System.String,System.Int32,System.Object)">
      <summary>
            Find a location close to a given latitude and logitude.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of locations that were found.</param>
      <param name="searchDistanceInMeters">The radius of the location search.</param>
      <param name="latitude">The latitude where the search should start.</param>
      <param name="longitude">The longitude where the search should start.</param>
      <param name="numberOfResults">Optional number of result to return, defaults to 10.</param>
      <param name="searchForName">Optional search string, for example: "Star*" to search for all place that start with the string "Star"</param>
      <param name="searchCategoryId">Optional search category ID to narrow down the search with.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Places.GetCategoriesAsync(System.Action{System.Collections.Generic.Dictionary{System.Int32,System.String},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get all geo-location categories in Buddy.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of geo-location categories mapped to their IDs.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Places.GetAsync(System.Action{Buddy.Place,Buddy.BuddyCallbackParams},System.Int32,System.Double,System.Double,System.Object)">
      <summary>
            Get a Place by it's globally unique identifier. This method can also be used to calculate a distance from a lat/long to a place.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the Place on success or null if there is no place with the given ID.</param>
      <param name="placeId">The ID of the place to retreive.</param>
      <param name="latitude">The optional latitude to calcualte a distance to.</param>
      <param name="longitude">The optioanl longitude to calculate a distance to.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Receipt">
      <summary>
            Represents a receipt in the Buddy system.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.ReceiptHistoryID">
      <summary>
            Gets the ID of the retrieved receipt history item.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.StoreName">
      <summary>
            Gets the name of the store in which this receipt was saved.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.UserID">
      <summary>
            Gets the ID of the user this receipt was saved for.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.HistoryDateTime">
      <summary>
            Gets the DateTime this receipt was saved or modified.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.ReceiptData">
      <summary>
            Gets the receipt data that was stored with this receipt.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.TotalCost">
      <summary>
            Gets the total cost of the transaction associated with this receipt.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.ItemQuantity">
      <summary>
            Gets the number of items which were purchased during the transaction associated with this receipt.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.AppData">
      <summary>
            Gets the (optional) metadata that was stored with this receipt.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.HistoryCustomTransactionID">
      <summary>
            Gets the customTransactionID that was saved for this receipt.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.VerificationResultData">
      <summary>
            Gets the raw verification data associated with the receipt as returned from the underlying Facebook or Apple servers.
            </summary>
    </member>
    <member name="P:Buddy.Receipt.StoreItemID">
      <summary>
            Gets the Buddy StoreItemID of the item purchased in this transaction.
            </summary>
    </member>
    <member name="T:Buddy.Sounds">
      <summary>
            An object that can be used to save files. 
            </summary>
    </member>
    <member name="M:Buddy.Sounds.GetSoundAsync(System.Action{System.IO.Stream,Buddy.BuddyCallbackParams},System.String,Buddy.Sounds.SoundQuality)">
      <summary>
            Retrieves a sound from the Buddy sound library, and returns a Stream.  Your application should perisist this stream locally in a location such as IsolatedStorage.
            </summary>
      <param name="callback">Callback that will be invoked upon completion.</param>
      <param name="soundName">The name of the sound file.  See the Buddy Developer Portal "Sounds" page to find sounds and get their names.</param>
      <param name="quality">The quality level of the file to retrieve.</param>
    </member>
    <member name="M:Buddy.Sounds.GetSoundAsync(System.String,Buddy.Sounds.SoundQuality)">
      <summary>
            Retrieves a sound from the Buddy sound library, and returns a Stream.  Your application should perisist this stream locally in a location such as IsolatedStorage.
            </summary>
      <param name="soundName">The name of the sound file.  See the Buddy Developer Portal "Sounds" page to find sounds and get their names.</param>
      <param name="quality">The quality level of the file to retrieve.</param>
    </member>
    <member name="T:Buddy.Sounds.SoundQuality">
      <summary>Defines available sound quality levels for each sound file.</summary>
    </member>
    <member name="T:Buddy.Startup">
      <summary>
            Represents a single, named startup in the Buddy system.
            </summary>
    </member>
    <member name="P:Buddy.Startup.CenterLat">
      <summary>
            Gets the latitude of the center of the specified metro area.
            </summary>
    </member>
    <member name="P:Buddy.Startup.CenterLong">
      <summary>
            Gets the longitude of the center of the specified metro area.
            </summary>
    </member>
    <member name="P:Buddy.Startup.City">
      <summary>
            Gets the city in which the startup is located.
            </summary>
    </member>
    <member name="P:Buddy.Startup.CrunchBaseUrl">
      <summary>
            Gets the crunchbase.com URL of the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.CustomData">
      <summary>
            Gets the custom data of the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.DistanceInKilometers">
      <summary>
            Gets the distance in kilometers from the center of the specified metro area that the startup is located.
            </summary>
    </member>
    <member name="P:Buddy.Startup.DistanceInMeters">
      <summary>
            Gets the distance in meters from the center of the specified metro area that the startup is located.
            </summary>
    </member>
    <member name="P:Buddy.Startup.DistanceInMiles">
      <summary>
            Gets the distance in miles from the center of the specified metro area that the startup is located.
            </summary>
    </member>
    <member name="P:Buddy.Startup.DistanceInYards">
      <summary>
            Gets the distance in yards from the center of the specified metro area that the startup is located.
            </summary>
    </member>
    <member name="P:Buddy.Startup.EmployeeCount">
      <summary>
            Gets the number of employees employed by the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.FacebookURL">
      <summary>
            Gets URL of the startup's Facebook page.
            </summary>
    </member>
    <member name="P:Buddy.Startup.FundingSource">
      <summary>
            Gets the source of the funds raised by the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.HomePageURL">
      <summary>
            Gets the URL of the statup's home page.
            </summary>
    </member>
    <member name="P:Buddy.Startup.Industry">
      <summary>
            Gets the industry of the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.LinkedinURL">
      <summary>
            Gets the URL of the startup's LinkedIn page.
            </summary>
    </member>
    <member name="P:Buddy.Startup.LogoURL">
      <summary>
            Gets the logo URL of the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.MetroLocation">
      <summary>
            Gets the metro area in which the startup is located.
            </summary>
    </member>
    <member name="P:Buddy.Startup.PhoneNumber">
      <summary>
            Gets the phone number of the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.StartupName">
      <summary>
            Gets the company name of the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.State">
      <summary>
            Gets the state in which the startup is located.
            </summary>
    </member>
    <member name="P:Buddy.Startup.StreetAddress">
      <summary>
            Gets the address of the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.StartupID">
      <summary>
            Gets the unique ID assigned to the startup.
            </summary>
    </member>
    <member name="P:Buddy.Startup.TotalFundingRaised">
      <summary>
            Gets the amount of money that the startup as raised.
            </summary>
    </member>
    <member name="P:Buddy.Startup.TwitterURL">
      <summary>
            Gets the startup's Twitter URL.
            </summary>
    </member>
    <member name="P:Buddy.Startup.ZipPostal">
      <summary>
            Gets the zip or postal code of the startup.
            </summary>
    </member>
    <member name="T:Buddy.Startups">
      <summary>
            Represents an object that can be used to search for startups around the user.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");
            AuthenticatedUser user = await client.LoginAsync("username", "password");

            // find all the startups within 10k of a location
            //
            IEnumerable&lt;Startup&gt; results = await user.Startups.FindAsync(10000, 47.7, -122.2);
</code></example></summary>
    </member>
    <member name="M:Buddy.Startups.FindAsync(System.Action{System.Collections.Generic.List{Buddy.Startup},Buddy.BuddyCallbackParams},System.Int32,System.Double,System.Double,System.Int32,System.String,System.Object)">
      <summary>
            Searches for statups by name within the distance of the specified location. Note: To search for all startups within the distance from the specified location, leave the SearchName parameter empty.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of startups that were found.</param>
      <param name="searchDistanceInMeters">The radius of the startup search.</param>
      <param name="latitude">The latitude where the search should start.</param>
      <param name="longitude">The longitude where the search should start.</param>
      <param name="numberOfResults">The number of search results to return.</param>
      <param name="searchForName">Optional search string, for example: "Star*" to search for all startups that begin with the string "Star".</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Startups.GetMetroAreaListAsync(System.Action{System.Collections.Generic.List{Buddy.MetroArea},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Gets a list of the supported metro areas for statups including the URL to an image for each area returned.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of MetroAreas that were found.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Startups.GetFromMetroAreaAsync(System.Action{System.Collections.Generic.List{Buddy.Startup},Buddy.BuddyCallbackParams},System.String,System.Int32,System.Object)">
      <summary>
            Get a list of startups in the specified metro area.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a .NET List of Startups that were found.</param>
      <param name="metroName">The name of the metro area within which to search for startups.</param>
      <param name="recordLimit">The number of search results to return.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.StoreItem">
      <summary>
            Represents a single, named store item in the Buddy system.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.AppData">
      <summary>
            Gets the optional metadata associated with the item.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.CustomItemID">
      <summary>
            Gets the ID by which external sources identify the item by.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemAvailableFlag">
      <summary>
            Gets the flag indicating if the item is currently available for sale.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemCost">
      <summary>
            Gets the cost of the item.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemDateTime">
      <summary>
            Gets the date and time when the item was created or last updated.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemDescription">
      <summary>
            Gets the brief description of the item.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemDownloadUri">
      <summary>
            Gets the URI where the item can be downloaded from.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemFreeFlag">
      <summary>
            Gets the flag indicating if the item is free.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemIconUri">
      <summary>
            Gets the URI of the icon to display for this item.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemName">
      <summary>
            Gets the name of the item.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.ItemPreviewUri">
      <summary>
            Gets the URI where the item can be previewed.
            </summary>
    </member>
    <member name="P:Buddy.StoreItem.StoreItemID">
      <summary>
            Gets the ID of the store item.
            </summary>
    </member>
    <member name="T:Buddy.UserGender">
      <summary>
            Represents the gender of a user.
            </summary>
    </member>
    <member name="T:Buddy.UserStatus">
      <summary>
            Represents the status of the user.
            </summary>
    </member>
    <member name="T:Buddy.UserMetadata">
      <summary>
            Represents an object used to access and modify user metadata items. You need an AuthenticatedUser to access this class.
            <example><code>
BuddyClient client = new BuddyClient("APPNAME", "APPPASS");

            AuthenticatedUser user = await client.LoginAsync("username", "password");
            await user.Metadata.SetAsync("some key", "some value");

            // find some metadata within 1 kilometer of a location
            IDictionary&lt;string, MetadataItem&gt; values = await user.Metadata.FindAsync(1000, 47.7, -122.2);
</code></example></summary>
    </member>
    <member name="M:Buddy.UserMetadata.GetAllAsync(System.Action{System.Collections.Generic.Dictionary{System.String,Buddy.MetadataItem},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get all the metadata items for this user. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of all of the user's metadata items.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.GetAsync(System.Action{Buddy.MetadataItem,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
      <param name="key">The key to use to reference the metadata item.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is the metadata item or null if it doesn't exist.</param>
      <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.SetAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the item was set, false otherwise..</param>
      <param name="key">The key of the metadata item, can't be null or empty.</param>
      <param name="value">The value of the metadata item, can't be null.</param>
      <param name="latitude">The optional latitude of the metadata item.</param>
      <param name="longitude">The optional longitude of the metadata item.</param>
      <param name="appTag">The optional application tag for this item.</param>
      <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">When value is null.</exception>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.BatchSetAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Double,System.Double,System.String,System.Object)">
      <summary>
            Set metadata item values for keys. You can additionally add a latitude and longitude coordinate to record the location
            from where these items were set, or tag all items with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the item was set, false otherwise.</param>
      <param name="keys">The keys of the metadata items, can't be null or empty.</param>
      <param name="values">The values of the metadata items, can't be null or empty.</param>
      <param name="latitude">The optional latitude of the metadata items.</param>
      <param name="longitude">The optional longitude of the metadata items.</param>
      <param name="appTag">The optional application tag for these items.</param>
      <exception cref="T:System.ArgumentException">When any key is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">When any value is or empty.</exception>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.Object)">
      <summary>
            Delete a metadata item referenced by key.
            </summary>
      <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
      <param name="callback">The async callback to call on success or error. The first parameter is true if the item was deleted, false otherwise (i.e. doesn't exist).</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.DeleteAllAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete all user metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true if all metadata was deleted, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.FindAsync(System.Action{System.Collections.Generic.Dictionary{System.String,Buddy.MetadataItem},Buddy.BuddyCallbackParams},System.Int32,System.Double,System.Double,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Object)">
      <summary>
            Search for metadata items in this user. Note that this method will only find user-level metadata items.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a dictionary of metadata keys mapped to items.</param>
      <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
      <param name="latitude">The latitude from where the saerch will start.</param>
      <param name="longitude">The longitude from where the saerch will start.</param>
      <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
      <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
      <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
      <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
      <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
      <param name="sortAscending">Optionally sort the results ascending.</param>
      <param name="disableCache">Optionally disable cache searches.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.SumAsync(System.Action{Buddy.MetadataSum,Buddy.BuddyCallbackParams},System.String,System.Int32,System.Double,System.Double,System.Int32,System.String,System.Object)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a sum of all the found metadata item values.</param>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.BatchSumAsync(System.Action{System.Collections.Generic.List{Buddy.MetadataSum},Buddy.BuddyCallbackParams},System.String,System.String,System.Double,System.Double,System.Int32,System.String,System.Object)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of sums corresponding to all the keys that were given to this method.</param>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.GetAllAsync">
      <summary>
            Get all the metadata items for this user. Note that this can be a very expensive method, try to retrieve specific items if possible
            or do a search.
            </summary>
      <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.GetAsync(System.String)">
      <summary>
            Get a metadata item with a key. The key can't be null or an empty string.
            </summary>
      <param name="key">The key to use to reference the metadata item.</param>
      <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
      <returns>A Task&lt;MetadataItem&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.SetAsync(System.String,System.String,System.Double,System.Double,System.String)">
      <summary>
            Set a metadata item value for a key. You can additional add latitude and longitude coordinate to record the location
            from where this item was set, or tag the item with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
      <param name="key">The key of the metadata item, can't be null or empty.</param>
      <param name="value">The value of the metadata item, can't be null.</param>
      <param name="latitude">The optional latitude of the metadata item.</param>
      <param name="longitude">The optional longitude of the metadata item.</param>
      <param name="appTag">The optional application tag for this item.</param>
      <exception cref="T:System.ArgumentException">When key is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">When value is null.</exception>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.BatchSetAsync(System.String,System.String,System.Double,System.Double,System.String)">
      <summary>
            Set metadata item values for keys. You can additionally add a latitude and longitude coordinate to record the location
            from where these items were set, or tag all items with a custom tag. 
            The item doesn't have to exist to be set, this method acts as an Add method in cases where the item doesn't exist.
            </summary>
      <param name="keys">The keys of the metadata items, can't be null or empty.</param>
      <param name="values">The values of the metadata items, can't be null or empty.</param>
      <param name="latitude">The optional latitude of the metadata items.</param>
      <param name="longitude">The optional longitude of the metadata items.</param>
      <param name="appTag">The optional application tag for these items.</param>
      <exception cref="T:System.ArgumentException">When any key is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">When any value is or empty.</exception>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.DeleteAsync(System.String)">
      <summary>
            Delete a metadata item referenced by key.
            </summary>
      <param name="key">A valid key of a metadata item. The key can't be null or mpety.</param>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.DeleteAllAsync">
      <summary>
            Delete all user metadata. There is no way to recover from this operation, be careful when you call it.
            </summary>
      <returns>A Task&lt;Boolean&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.FindAsync(System.Int32,System.Double,System.Double,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Search for metadata items in this user. Note that this method will only find user-level metadata items.
            </summary>
      <param name="searchDistanceMeters">The distance in meters from the latitude and longitude to search in. To ignore this distance pass in 40075000 (the circumferance of the earth).</param>
      <param name="latitude">The latitude from where the saerch will start.</param>
      <param name="longitude">The longitude from where the saerch will start.</param>
      <param name="numberOfResults">Optionally limit the number of returned metadata items.</param>
      <param name="withKey">Optionally search for items with a specific key. The value of this parameter is treated as a wildcard.</param>
      <param name="withValue">Optionally search for items with a specific value. The value of this parameter is treated as a wildcard.</param>
      <param name="updatedMinutesAgo">Optionally return only items that were updated some minutes ago.</param>
      <param name="searchAsFloat">Optionally treat all metadata values as floats. Useful for min/max searches.</param>
      <param name="sortAscending">Optionally sort the results ascending.</param>
      <param name="disableCache">Optionally disable cache searches.</param>
      <returns>A Task&lt;IDictionary&lt;String,MetadataItem&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.SumAsync(System.String,System.Int32,System.Double,System.Double,System.Int32,System.String)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            </summary>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <returns>A Task&lt;MetadataSum&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.UserMetadata.BatchSumAsync(System.String,System.String,System.Double,System.Double,System.Int32,System.String)">
      <summary>
            This method returns the sum of a set of metadata items that correspond to a certain key wildcard. Note that the values of these items
            need to be numbers or floats, otherwise this method will fail.
            Unlike the 'Sum' method this method can take a list of keys separated by semicolons and will return a list of sums for all of those keys.
            </summary>
      <param name="forKeys">The key to use to filter the items that need to be summed. Is always treated as a wildcard.</param>
      <param name="withinDistance">Optionally sum only items within a certain number of meters from lat/long.</param>
      <param name="latitude">Optionally provide a latitude where the search can be started from.</param>
      <param name="longitude">Optionally provide a longitude where the search can be started from.</param>
      <param name="updatedMinutesAgo">Optionally sum only on items that have been update a number of minutes ago.</param>
      <param name="withAppTag">Optionally sum only items that have a certain application tag.</param>
      <returns>A Task&lt;IEnumerable&lt;MetadataSum&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.Video">
      <summary>
            Represents a class that can be used to add, retrieve search for and delte Video data in the system.
            <example><code></code></example></summary>
    </member>
    <member name="M:Buddy.Video.EditInfoAsync(System.String,System.String)">
      <summary>
            Edits the information related to this Video.
            </summary>
      <param name="friendlyName">The new human friendly name for the Video. Leave null or empty to not change.</param>
      <param name="appTag">The new AppTag for the video. Leave null or empty to not change.</param>
      <returns>A Task&lt;bool&gt; that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Video.DeleteAsync">
      <summary>
            Delte this Video
            </summary>
      <returns>A Task&lt;bool&gt; that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.Video.VideoID">
      <summary>
            Gets the ID of the video.
            </summary>
    </member>
    <member name="P:Buddy.Video.FriendlyName">
      <summary>
            Gets the human friendly name of the video.
            </summary>
    </member>
    <member name="P:Buddy.Video.MimeType">
      <summary>
            Gets the MimeType of the video.
            </summary>
    </member>
    <member name="P:Buddy.Video.FileSize">
      <summary>
            Gets the size of the video in bytes.
            </summary>
    </member>
    <member name="P:Buddy.Video.AppTag">
      <summary>
            Gets the optional application tag for the video.
            </summary>
    </member>
    <member name="P:Buddy.Video.Owner">
      <summary>
            Gets the UserID of the user that uploaded this video.
            </summary>
    </member>
    <member name="P:Buddy.Video.Latitude">
      <summary>
            Gets the latitude where the video was created.
            </summary>
    </member>
    <member name="P:Buddy.Video.Longitude">
      <summary>
            Gets the longitude where the video was created.
            </summary>
    </member>
    <member name="P:Buddy.Video.UploadDate">
      <summary>
            Gets the date the video was uploaded
            </summary>
    </member>
    <member name="P:Buddy.Video.LastTouchDate">
      <summary>
            Gets the date the video was last touched (uploaded or edited)
            </summary>
    </member>
    <member name="P:Buddy.Video.VideoUrl">
      <summary>
            Gets the URL where the video can be reached. To be passed into a media player.
            </summary>
    </member>
    <member name="M:Buddy.Videos.AddAsync(System.String,System.String,System.String,System.Double,System.Double,System.IO.Stream)">
      <summary>
            Uploads a Video and returns a Video object representing it.
            </summary>
      <param name="friendlyName">The human friendly name for the video.</param>
      <param name="mimeType">The MIMEType of the video.</param>
      <param name="appTag">Optional metadata to store with the Video object. ie: comments on the Video.</param>
      <param name="latitude">The latitude of the location where the Video object is being created.</param>
      <param name="longitude">The longitude of the location where the Video object is being created.</param>
      <param name="videoData">The bytes of the Video to upload.</param>
      <returns>A Task&lt;Video&gt; that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Videos.GetInfoAsync(System.Int64)">
      <summary>
            Gets a Video object that represents the given Video.
            </summary>
      <param name="videoID">The ID of the video to be retrieved.</param>
      <returns>A Task&lt;Video&gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Videos.SearchMyVideosAsync(System.String,System.String,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Searched the Videos belonging to the current user using the given criteria.
            </summary>
      <param name="friendlyName">The string to search the friendlyName by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="mimeType">The string to search the MIMEType by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="appTag">The string to search the AppTag by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="searchDistance">The radius of the startup search. Pass -1 to ignore.</param>
      <param name="searchLatitude">The latitude where the search should start.</param>
      <param name="searchLongitude">The longitude where the search should start.</param>
      <param name="timeFilter">The number of days in the past to search. Pass -1 to ignore.</param>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Video&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Videos.SearchVideosAsync(System.String,System.String,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Searches the Videos belonging to all users using the given criteria.
            </summary>
      <param name="friendlyName">The string to search the friendlyName by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="mimeType">The string to search the MIMEType by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="appTag">The string to search the AppTag by. Use % as a wildcard. Null or empty string to ignore.</param>
      <param name="searchDistance">The radius of the startup search. Pass -1 to ignore.</param>
      <param name="searchLatitude">The latitude where the search should start.</param>
      <param name="searchLongitude">The longitude where the search should start.</param>
      <param name="timeFilter">The number of days in the past to search. Pass -1 to ignore.</param>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Video&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Videos.GetVideoListAsync(System.Int64,System.Int32)">
      <summary>
            Gets a list of the videos belonging to either the given User or to all users of the App.
            </summary>
      <param name="userID">The UserID for which to return Videos. Pass -1 for all users.</param>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Video&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.Videos.GetMyVideoListAsync(System.Int32)">
      <summary>
            Gets a list of the videos belonging to the current User.
            </summary>
      <param name="recordLimit">The maximum number of results to return. No larger than 500.</param>
      <returns>A Task&lt;IEnumerable&lt;Video&gt; &gt;that can be used to monitor progress on this call.</returns>
    </member>
    <member name="T:Buddy.VirtualAlbum">
      <summary>
            Represents a single virtual album. Unlike normal photoalbums any user may add existing photos to a virtual album. 
            Only the owner of the virtual album can delete the album however.
            </summary>
    </member>
    <member name="M:Buddy.VirtualAlbum.DeleteAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Delete this virtual album.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbum.AddPictureAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.PicturePublic,System.Object)">
      <summary>
            Add an existing (uploaded) photo to a virtual album. This photo can be either private or public (either PicturePublic and Picture will work).
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="picture">The picture to add to the virtual albums. Either PicturePublic or Picture works.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbum.AddPictureBatchAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.Collections.Generic.List{Buddy.PicturePublic},System.Object)">
      <summary>
            Add a list of pictures to this virtual album.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="pictures">The list of pictures to add to this photo album. Either PicturePublic or Picture works.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbum.RemovePictureAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.PicturePublic,System.Object)">
      <summary>
            Remove a picture from this virtual album.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="picture">The picture to remove from the album. Either PicturePublic or Picture works.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbum.UpdateAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},System.String,System.String,System.Object)">
      <summary>
            Update this virtul albums name and app.tag
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="newName">The new name for the album.</param>
      <param name="newAppTag">An optional new application tag for the album.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbum.UpdatePictureAsync(System.Action{System.Boolean,Buddy.BuddyCallbackParams},Buddy.PicturePublic,System.String,System.String,System.Object)">
      <summary>
            Update virtual album picture comment or app.tag.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is true on success, false otherwise.</param>
      <param name="picture">The picture to be updated, either PicturePublic or Picture works.</param>
      <param name="newComment">The new comment to set for the picture.</param>
      <param name="newAppTag">An optional new application tag for the picture.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="P:Buddy.VirtualAlbum.Pictures">
      <summary>
            Gets a readonly collection of pictures in this album. Use the AddPicture method to add more pictures to the album or the Picture.Delete method
            to remove them.
            </summary>
    </member>
    <member name="P:Buddy.VirtualAlbum.ID">
      <summary>
            Gets the globally unique ID of the virtual album.
            </summary>
    </member>
    <member name="P:Buddy.VirtualAlbum.Name">
      <summary>
            Gets the name of the virtual album.
            </summary>
    </member>
    <member name="P:Buddy.VirtualAlbum.ThumbnailUrl">
      <summary>
            Gets the thumbnail for the virtual album.
            </summary>
    </member>
    <member name="P:Buddy.VirtualAlbum.OwnerUserId">
      <summary>
            Gets the user ID of the owner of this virtual album.
            </summary>
    </member>
    <member name="P:Buddy.VirtualAlbum.ApplicationTag">
      <summary>
            Gets the optional application tag for this virtual album.
            </summary>
    </member>
    <member name="P:Buddy.VirtualAlbum.CreatedOn">
      <summary>
            Gets the date this virtual album was created.
            </summary>
    </member>
    <member name="P:Buddy.VirtualAlbum.LastUpdated">
      <summary>
            Gets the date this virtual album was last updated.
            </summary>
    </member>
    <member name="T:Buddy.VirtualAlbums">
      <summary>
            Represents a class that can be used to interact with virtual albums. Unlike normal photoalbums any user may add existing photos to a virtual album. 
            Only the owner of the virtual album can delete the album however.
            </summary>
    </member>
    <member name="M:Buddy.VirtualAlbums.CreateAsync(System.Action{Buddy.VirtualAlbum,Buddy.BuddyCallbackParams},System.String,System.String,System.Object)">
      <summary>
            Create a new virtual album. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the new album.</param>
      <param name="name">The name of the new virtual album.</param>
      <param name="appTag">An optional application tag for the album.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbums.GetAsync(System.Action{Buddy.VirtualAlbum,Buddy.BuddyCallbackParams},System.Int32,System.Object)">
      <summary>
            Get a virtual album by its globally unique identifier. All the album photos will be retreived as well. Note that this method internally does two web-service calls, and the IAsyncResult object
            returned is only valid for the first one.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is the album.</param>
      <param name="albumId">The ID of the virtual album to retrieve.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
    <member name="M:Buddy.VirtualAlbums.GetMyAsync(System.Action{System.Collections.Generic.List{System.Int32},Buddy.BuddyCallbackParams},System.Object)">
      <summary>
            Get the IDs of all the virtual albums that this user owns.
            </summary>
      <param name="callback">The async callback to call on success or error. The first parameter is a list of album IDs that this user owns.</param>
      <param name="state">An optional user defined object that will be passed to the callback.</param>
      <returns>An IAsyncResult handle that can be used to monitor progress on this call.</returns>
    </member>
  </members>
</doc>